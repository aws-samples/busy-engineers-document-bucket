{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Busy Engineer's Document Bucket Welcome to the Busy Engineer's Document Bucket workshop. In this workshop, you will be guided through adding client-side encryption with KMS and the AWS Encryption SDK. Each exercise has step-by-step instructions. Each exercise also has a -complete version available to use as a reference. Background: The Document Bucket System The example system you will will work on is the Document Bucket. As you begin this workshop, this system uses DynamoDB and S3 to store , search , list , and retrieve documents with associated metadata. The bodies of each document are written as S3 objects. DynamoDB maintains a pointer to that object, along with associated metadata for that object. Additionally, DynamoDB is set up to maintain records of tags used to identify the document, so that you can search for documents that match a particular tag. After your work in the workshop is complete, you will have added client-side encryption with the AWS Encryption SDK and AWS KMS to the Document Bucket. Before data leaves the origin instance in store , it will be encrypted client-side. After the data is retrieve d, it will be decrypted client side with a permissions check and audit entry from AWS KMS. You will also explore options for binding and validating the metadata to the object. Exercises In this workshop, you will work through the following exercises: Adding the AWS Encryption SDK Adding Multi-KMS-Key Support to the Document Bucket Working With Encryption Context Getting Started Ready to start? Proceed to Getting Started to begin.","title":"Home"},{"location":"#the-busy-engineers-document-bucket","text":"Welcome to the Busy Engineer's Document Bucket workshop. In this workshop, you will be guided through adding client-side encryption with KMS and the AWS Encryption SDK. Each exercise has step-by-step instructions. Each exercise also has a -complete version available to use as a reference.","title":"The Busy Engineer's Document Bucket"},{"location":"#background-the-document-bucket-system","text":"The example system you will will work on is the Document Bucket. As you begin this workshop, this system uses DynamoDB and S3 to store , search , list , and retrieve documents with associated metadata. The bodies of each document are written as S3 objects. DynamoDB maintains a pointer to that object, along with associated metadata for that object. Additionally, DynamoDB is set up to maintain records of tags used to identify the document, so that you can search for documents that match a particular tag. After your work in the workshop is complete, you will have added client-side encryption with the AWS Encryption SDK and AWS KMS to the Document Bucket. Before data leaves the origin instance in store , it will be encrypted client-side. After the data is retrieve d, it will be decrypted client side with a permissions check and audit entry from AWS KMS. You will also explore options for binding and validating the metadata to the object.","title":"Background: The Document Bucket System"},{"location":"#exercises","text":"In this workshop, you will work through the following exercises: Adding the AWS Encryption SDK Adding Multi-KMS-Key Support to the Document Bucket Working With Encryption Context","title":"Exercises"},{"location":"#getting-started","text":"Ready to start? Proceed to Getting Started to begin.","title":"Getting Started"},{"location":"adding-the-encryption-sdk/","text":"Exercise 1: Add the AWS Encryption SDK In this section, you will add client-side encryption to the Busy Engineer's Document Bucket using the AWS Encryption SDK and AWS KMS. Background In Getting Started , you set up your Busy Engineer's Document Bucket environment and selected a workshop language. Now you will add the AWS Encryption SDK to encrypt objects on the client, before they are transmitted off of the host machine to the internet. You will use AWS KMS to provide a data key for each object, using a KMS Key that you set up in Getting Started . Let's Go! Starting Directory Make sure you are in the exercises directory for the language of your choice: Java Typescript Node.JS JavaScript Node.JS Python 1 cd ~/environment/workshop/exercises/java/add-esdk-start 1 cd ~/environment/workshop/exercises/node-typescript/add-esdk-start 1 cd ~/environment/workshop/exercises/node-javascript/add-esdk-start 1 cd ~/environment/workshop/exercises/python/add-esdk-start Step 1: Add the ESDK Dependency Look for ADD-ESDK-START comments in the code to help orient yourself. Start by adding the Encryption SDK dependency to the code. Java Typescript Node.JS JavaScript Node.JS Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java package sfw.example.esdkworkshop ; // ADD-ESDK-START: Add the ESDK Dependency import com.amazonaws.encryptionsdk.AwsCrypto ; import com.amazonaws.encryptionsdk.CommitmentPolicy ; import com.amazonaws.encryptionsdk.CryptoResult ; import com.amazonaws.encryptionsdk.MasterKey ; import com.amazonaws.encryptionsdk.MasterKeyProvider ; import com.amazonaws.encryptionsdk.kms.KmsMasterKey ; ... private final String tableName ; private final String bucketName ; // ADD-ESDK-START: Add the ESDK Dependency private final AwsCrypto awsEncryptionSdk ; private final MasterKeyProvider mkp ; ... public Api ( // ADD-ESDK-START: Add the ESDK Dependency AmazonDynamoDB ddbClient , String tableName , AmazonS3 s3Client , String bucketName , MasterKeyProvider <? extends MasterKey > mkp ) { this . ddbClient = ddbClient ; this . tableName = tableName ; this . s3Client = s3Client // ADD-ESDK-START: Add the ESDK Dependency this . awsEncryptionSdk = AwsCrypto . builder () . withCommitmentPolicy ( CommitmentPolicy . ForbidEncryptAllowDecrypt ) . build (); this . mkp = mkp ; } // Save and close. // Edit ./src/main/java/sfw/example/esdkworkshop/App.java package sfw.example.esdkworkshop ; // ADD-ESDK-START: Add the ESDK Dependency import com.amazonaws.encryptionsdk.kms.KmsMasterKeyProvider ; // Save and close. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Edit ./src/store.ts // ADD-ESDK-START: Add the ESDK Dependency import { KmsKeyringNode , buildClient , CommitmentPolicy } from \"@aws-crypto/client-node\" ; const { encryptStream } = buildClient ( CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) // Save and exit // Edit ./src/retrieve.ts // ADD-ESDK-START: Add the ESDK Dependency import { KmsKeyringNode , buildClient , CommitmentPolicy } from \"@aws-crypto/client-node\" ; const { decryptStream } = buildClient ( CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Edit ./store.js // ADD-ESDK-START: Add the ESDK Dependency const { KmsKeyringNode , buildClient , CommitmentPolicy } = require ( \"@aws-crypto/client-node\" ); const { encryptStream } = buildClient ( CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) // Save and exit // Edit ./retrieve.js // ADD-ESDK-START: Add the ESDK Dependency const { KmsKeyringNode , buildClient , CommitmentPolicy } = require ( \"@aws-crypto/client-node\" ); const { decryptStream } = buildClient ( CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Edit src/document_bucket/__init__.py # ADD-ESDK-START: Add the ESDK Dependency import aws_encryption_sdk # Save and exit # Edit src/document_bucket/api.py # ADD-ESDK-START: Add the ESDK Dependency import aws_encryption_sdk from aws_encryption_sdk import StrictAwsKmsMasterKeyProvider # type: ignore from aws_encryption_sdk.identifiers import CommitmentPolicy # Add a Master Key Provider to your __init__ # ADD-ESDK-START: Add the ESDK Dependency def __init__ ( self , bucket , table , master_key_provider : StrictAwsKmsMasterKeyProvider ): self . bucket = bucket self . table = table # ADD-ESDK-START: Add the ESDK Dependency self . master_key_provider : StrictAwsKmsMasterKeyProvider = master_key_provider # Save and exit What Happened? You added a dependency on the AWS Encryption SDK library in your code You changed the API to expect that a Keyring or Master Key Provider will be passed to your code to use in store and retrieve operations Step 2: Add Encryption to store Now that you have the AWS Encryption SDK imported, start encrypting your data before storing it. Java Typescript Node.JS JavaScript Node.JS Python 1 2 3 4 5 6 7 8 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java public PointerItem store ( byte [] data , Map < String , String > context ) { // ADD-ESDK-START: Add Encryption to store CryptoResult < byte [] , KmsMasterKey > encryptedMessage = awsEncryptionSdk . encryptData ( mkp , data ); DocumentBundle bundle = DocumentBundle . fromDataAndContext ( encryptedMessage . getResult (), context ); writeItem ( bundle . getPointer ()); ... 1 2 3 4 5 6 // Edit ./src/store.ts // ADD-ESDK-START: Add Encryption to store const Body = fileStream . pipe ( encryptStream ( encryptKeyring )); // Save and exit 1 2 3 4 5 6 // Edit ./store.js // ADD-ESDK-START: Add Encryption to store const Body = fileStream . pipe ( encryptStream ( encryptKeyring )); // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 # Edit src/document_bucket/api.py # Find the store function and edit it to add the Master Key Provider # and to write the encrypted data # ADD-ESDK-START: Add Encryption to store client = aws_encryption_sdk . EncryptionSDKClient ( commitment_policy = CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) encrypted_data , header = client . encrypt ( source = data , key_provider = self . master_key_provider , ) ... self . _write_object ( encrypted_data , item ) What Happened? The application will use the AWS Encryption SDK to encrypt your data client-side under a KMS Key before storing it by: Requesting a new data key using your Keyring or Master Key Provider Encrypting your data with the returned data key Returning your encrypted data in the AWS Encryption SDK message format Extracting the ciphertext from the AWS Encryption SDK message Passing the ciphertext to the AWS S3 SDK for storage in S3 Step 3: Add Decryption to retrieve Now that the application encypts your data before storing it, it will need to decrypt your data before returning it to the caller (at least for the data to be useful, anyway). Java Typescript Node.JS JavaScript Node.JS Python 1 2 3 4 5 6 7 8 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java // Find retrieve(...) byte [] data = getObjectData ( key ); // ADD-ESDK-START: Add Decryption to retrieve CryptoResult < byte [] , KmsMasterKey > decryptedMessage = awsEncryptionSdk . decryptData ( mkp , data ); PointerItem pointer = getPointerItem ( key ); // ADD-ESDK-START: Add Decryption to retrieve return DocumentBundle . fromDataAndPointer ( decryptedMessage . getResult (), pointer ); 1 2 3 4 5 6 7 8 9 // Edit ./src/retrieve.ts // ADD-ESDK-START: Add Decryption to retrieve return s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )); // Save and Exit 1 2 3 4 5 6 7 8 9 // Edit ./retrieve.js // ADD-ESDK-START: Add Decryption to retrieve return s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )); // Save and Exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Edit src/document_bucket/api.py # Find the retrieve function and edit it to add a call to decrypt the # encrypted data before returning it item = self . _get_pointer_item ( PointerQuery . from_key ( pointer_key )) # ADD-ESDK-START: Add Decryption to retrieve encrypted_data = self . _get_object ( item ) client = aws_encryption_sdk . EncryptionSDKClient ( commitment_policy = CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) plaintext , header = client . decrypt ( source = encrypted_data , key_provider = self . master_key_provider ) return DocumentBundle . from_data_and_context ( plaintext , item . context ) # Save and exit What Happened? The application now decrypts data client-side, as well. The data returned from S3 for retrieve is encrypted. Before returning that data to the user, you added a call to the AWS Encryption SDK to decrypt the data. Under the hood, the Encryption SDK is: Reading the AWS Encryption SDK formatted encrypted message Calling KMS to request to decrypt your message's encrypted data key using the Faythe KMS Key Using the decrypted data key to decrypt the message Returning the message plaintext and Encryption SDK headers to you Step 4: Configure the Faythe KMS Key in the Encryption SDK Now that you have declared your dependencies and updated your code to encrypt and decrypt data, the final step is to pass through the configuration to the AWS Encryption SDK to start using your KMS Keys to protect your data. Java Typescript Node.JS JavaScript Node.JS Python 1 2 3 4 5 6 7 8 9 10 11 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java AmazonS3 s3Client = AmazonS3ClientBuilder . defaultClient (); // ADD-ESDK-START: Configure the Faythe KMS Key in the Encryption SDK // Load configuration of KMS resources String faytheKmsKey = stateConfig . contents . state . FaytheKmsKey ; // Set up the Master Key Provider to use KMS KmsMasterKeyProvider mkp = KmsMasterKeyProvider . builder (). buildStrict ( faytheKmsKey ); return new Api ( ddbClient , tableName , s3Client , bucketName , mkp ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Edit ./src/store.ts // ADD-ESDK-START: Configure the Faythe KMS Key in the Encryption SDK const faytheKmsKey = config . state . getFaytheKmsKey (); const encryptKeyring = new KmsKeyringNode ({ generatorKeyId : faytheKmsKey }); // Save and exit // Edit ./src/retrieve.ts // ADD-ESDK-START: Set up a keyring to use Faythe's KMS Key for decrypting. const faytheKmsKey = config . state . getFaytheKmsKey (); const decryptKeyring = new KmsKeyringNode ({ keyIds : [ faytheKmsKey ] }); // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Edit ./store.js // ADD-ESDK-START: Configure the Faythe KMS Key in the Encryption SDK const faytheKmsKey = config . state . getFaytheKmsKey (); const encryptKeyring = new KmsKeyringNode ({ generatorKeyId : faytheKmsKey }); // Save and exit // Edit ./retrieve.js // ADD-ESDK-START: Set up a keyring to use Faythe's KMS Key for decrypting. const faytheKmsKey = config . state . getFaytheKmsKey (); const decryptKeyring = new KmsKeyringNode ({ keyIds : [ faytheKmsKey ] }); // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Edit src/document_bucket/__init__.py ... # ADD-ESDK-START: Configure the Faythe KMS Key in the Encryption SDK # Pull configuration of KMS resources faythe_kms_key = state [ \"FaytheKmsKey\" ] # And the Master Key Provider configuring how to use KMS kms_key = [ faythe_kms_key ] mkp = aws_encryption_sdk . StrictAwsKmsMasterKeyProvider ( key_ids = kms_key ) operations = DocumentBucketOperations ( bucket , table , mkp ) # Save and exit What Happened? In Getting Started , you launched CloudFormation stacks for KMS Keys. One of these KMS Keys was nicknamed Faythe. As part of launching these templates, the KMS Key's Amazon Resource Name (ARN) was written to a configuration file on disk, the state variable that is loaded and parsed. Now Faythe's ARN is pulled into a variable, and used to initialize a Keyring or Master Key Provider that will use the Faythe KMS Key. That new Keyring/Master Key Provider is passed into your API, and you are set to start encrypting and decrypting with KMS and the Encryption SDK. Checking Your Work Want to check your progress, or compare what you've done versus a finished example? Check out the code in one of the -complete folders to compare. Java Typescript Node.JS JavaScript Node.JS Python 1 cd ~/environment/workshop/exercises/java/add-esdk-complete 1 cd ~/environment/workshop/exercises/node-typescript/add-esdk-complete 1 cd ~/environment/workshop/exercises/node-javascript/add-esdk-complete 1 cd ~/environment/workshop/exercises/python/add-esdk-complete Try it Out Now that the code is written, let's load it up and try it out. If you'd like to try a finished example, use your language's -complete directory as described above. Experiment using the API as much as you like. To get started, here are some things to try: Compare CloudTrail Logs for usages of Faythe when you encrypt messages of different sizes (small, medium, large) Take a look at the contents of your S3 Document Bucket to inspect the raw object For more things to try, check out Explore Further , below. Java JavaScript Node.JS JavaScript Node.JS CLI Typescript Node.JS Typescript Node.JS CLI Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Compile your code mvn compile // To use the API programmatically, use this target to launch jshell mvn jshell : run / open startup . jsh Api documentBucket = App . initializeDocumentBucket (); documentBucket . list (); documentBucket . store ( \"Store me in the Document Bucket!\" . getBytes ()); for ( PointerItem item : documentBucket . list ()) { DocumentBundle document = documentBucket . retrieve ( item . partitionKey (). getS ()); System . out . println ( document . getPointer (). partitionKey (). getS () + \" : \" + new String ( document . getData (), java . nio . charset . StandardCharsets . UTF_8 )); } // Ctrl+D to exit jshell // Or, to run logic that you write in App.java, use this target after compile mvn exec : java 1 2 3 4 5 6 7 8 9 10 11 12 13 node list = require ( \"./list.js\" ) store = require ( \"./store.js\" ) retrieve = require ( \"./retrieve\" ) list (). then ( console . log ) store ( fs . createReadStream ( \"./store.js\" )). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) (() => { retrieve ( key ). pipe ( process . stdout )})() // Ctrl-D when finished to exit the REPL 1 2 3 4 5 6 ./cli.js list ./cli.js store ./store.js # Note the \"Key\" value ./cli.js list # Note the \"reference\" value ./cli.js retrieve $KeyOrReferenceValue 1 2 3 4 5 6 7 8 9 10 11 12 13 node - r ts - node / register ;({ list } = require ( \"./src/list.ts\" )) ;({ store } = require ( \"./src/store.ts\" )) ;({ retrieve } = require ( \"./src/retrieve.ts\" )) list (). then ( console . log ) store ( fs . createReadStream ( \"./src/store.ts\" )). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) (() => { retrieve ( key ). pipe ( process . stdout )})() // Ctrl-D when finished to exit the REPL 1 2 3 4 5 6 ./cli.ts list ./cli.ts store ./src/store.ts # Note the \"Key\" value ./cli.ts list # Note the \"reference\" value ./cli.ts retrieve $KeyOrReferenceValue 1 2 3 4 5 6 7 8 tox - e repl import document_bucket ops = document_bucket . initialize () ops . list () ops . store ( b 'some data' ) ops . list () ops . retrieve ( \"PutYourKeyHere\" ) . data # Ctrl-D when finished to exit the REPL Explore Further AWS Cloud Development Kit - Check out the ~/environment/workshop/cdk directory to see how the workshop resources are described using CDK. Alice, Bob, and Friends - Who are Faythe and Walter? Leveraging the Message Format - The AWS Encryption SDK Message Format is an open standard. Can you write something to detect whether an entry in the Document Bucket has been encrypted in this format or not, and retrieve or decrypt appropriately? More Test Content - Small test strings are enough to get started, but you might be curious to see what the behavior and performance looks like with larger documents. What if you add support for loading files to and from disk to the Document Bucket? Configuration Glue - If you are curious how the Document Bucket is configured, take a peek at ~/environment/workshop/cdk/Makefile and the make state target, as well as config.toml in the exercises root ~/environment/workshop/exercises/config.toml . The Busy Engineer's Document Bucket uses a base TOML file to set standard names for all CloudFormation resources and a common place to discover the real deployed set. Then it uses the AWS Cloud Development Kit (CDK) to deploy the resources and write out their identifiers to the state file. Applications use the base TOML file config.toml to locate the state file and pull the expected resource names. And that's how the system bootstraps all the resources it needs! Next exercise Now that you are encrypting and decrypting, how about adding Multiple KMS Keys ?","title":"Exercise 1"},{"location":"adding-the-encryption-sdk/#exercise-1-add-the-aws-encryption-sdk","text":"In this section, you will add client-side encryption to the Busy Engineer's Document Bucket using the AWS Encryption SDK and AWS KMS.","title":"Exercise 1: Add the AWS Encryption SDK"},{"location":"adding-the-encryption-sdk/#background","text":"In Getting Started , you set up your Busy Engineer's Document Bucket environment and selected a workshop language. Now you will add the AWS Encryption SDK to encrypt objects on the client, before they are transmitted off of the host machine to the internet. You will use AWS KMS to provide a data key for each object, using a KMS Key that you set up in Getting Started .","title":"Background"},{"location":"adding-the-encryption-sdk/#lets-go","text":"","title":"Let's Go!"},{"location":"adding-the-encryption-sdk/#starting-directory","text":"Make sure you are in the exercises directory for the language of your choice: Java Typescript Node.JS JavaScript Node.JS Python 1 cd ~/environment/workshop/exercises/java/add-esdk-start 1 cd ~/environment/workshop/exercises/node-typescript/add-esdk-start 1 cd ~/environment/workshop/exercises/node-javascript/add-esdk-start 1 cd ~/environment/workshop/exercises/python/add-esdk-start","title":"Starting Directory"},{"location":"adding-the-encryption-sdk/#step-1-add-the-esdk-dependency","text":"Look for ADD-ESDK-START comments in the code to help orient yourself. Start by adding the Encryption SDK dependency to the code. Java Typescript Node.JS JavaScript Node.JS Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java package sfw.example.esdkworkshop ; // ADD-ESDK-START: Add the ESDK Dependency import com.amazonaws.encryptionsdk.AwsCrypto ; import com.amazonaws.encryptionsdk.CommitmentPolicy ; import com.amazonaws.encryptionsdk.CryptoResult ; import com.amazonaws.encryptionsdk.MasterKey ; import com.amazonaws.encryptionsdk.MasterKeyProvider ; import com.amazonaws.encryptionsdk.kms.KmsMasterKey ; ... private final String tableName ; private final String bucketName ; // ADD-ESDK-START: Add the ESDK Dependency private final AwsCrypto awsEncryptionSdk ; private final MasterKeyProvider mkp ; ... public Api ( // ADD-ESDK-START: Add the ESDK Dependency AmazonDynamoDB ddbClient , String tableName , AmazonS3 s3Client , String bucketName , MasterKeyProvider <? extends MasterKey > mkp ) { this . ddbClient = ddbClient ; this . tableName = tableName ; this . s3Client = s3Client // ADD-ESDK-START: Add the ESDK Dependency this . awsEncryptionSdk = AwsCrypto . builder () . withCommitmentPolicy ( CommitmentPolicy . ForbidEncryptAllowDecrypt ) . build (); this . mkp = mkp ; } // Save and close. // Edit ./src/main/java/sfw/example/esdkworkshop/App.java package sfw.example.esdkworkshop ; // ADD-ESDK-START: Add the ESDK Dependency import com.amazonaws.encryptionsdk.kms.KmsMasterKeyProvider ; // Save and close. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Edit ./src/store.ts // ADD-ESDK-START: Add the ESDK Dependency import { KmsKeyringNode , buildClient , CommitmentPolicy } from \"@aws-crypto/client-node\" ; const { encryptStream } = buildClient ( CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) // Save and exit // Edit ./src/retrieve.ts // ADD-ESDK-START: Add the ESDK Dependency import { KmsKeyringNode , buildClient , CommitmentPolicy } from \"@aws-crypto/client-node\" ; const { decryptStream } = buildClient ( CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Edit ./store.js // ADD-ESDK-START: Add the ESDK Dependency const { KmsKeyringNode , buildClient , CommitmentPolicy } = require ( \"@aws-crypto/client-node\" ); const { encryptStream } = buildClient ( CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) // Save and exit // Edit ./retrieve.js // ADD-ESDK-START: Add the ESDK Dependency const { KmsKeyringNode , buildClient , CommitmentPolicy } = require ( \"@aws-crypto/client-node\" ); const { decryptStream } = buildClient ( CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Edit src/document_bucket/__init__.py # ADD-ESDK-START: Add the ESDK Dependency import aws_encryption_sdk # Save and exit # Edit src/document_bucket/api.py # ADD-ESDK-START: Add the ESDK Dependency import aws_encryption_sdk from aws_encryption_sdk import StrictAwsKmsMasterKeyProvider # type: ignore from aws_encryption_sdk.identifiers import CommitmentPolicy # Add a Master Key Provider to your __init__ # ADD-ESDK-START: Add the ESDK Dependency def __init__ ( self , bucket , table , master_key_provider : StrictAwsKmsMasterKeyProvider ): self . bucket = bucket self . table = table # ADD-ESDK-START: Add the ESDK Dependency self . master_key_provider : StrictAwsKmsMasterKeyProvider = master_key_provider # Save and exit","title":"Step 1: Add the ESDK Dependency"},{"location":"adding-the-encryption-sdk/#what-happened","text":"You added a dependency on the AWS Encryption SDK library in your code You changed the API to expect that a Keyring or Master Key Provider will be passed to your code to use in store and retrieve operations","title":"What Happened?"},{"location":"adding-the-encryption-sdk/#step-2-add-encryption-to-store","text":"Now that you have the AWS Encryption SDK imported, start encrypting your data before storing it. Java Typescript Node.JS JavaScript Node.JS Python 1 2 3 4 5 6 7 8 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java public PointerItem store ( byte [] data , Map < String , String > context ) { // ADD-ESDK-START: Add Encryption to store CryptoResult < byte [] , KmsMasterKey > encryptedMessage = awsEncryptionSdk . encryptData ( mkp , data ); DocumentBundle bundle = DocumentBundle . fromDataAndContext ( encryptedMessage . getResult (), context ); writeItem ( bundle . getPointer ()); ... 1 2 3 4 5 6 // Edit ./src/store.ts // ADD-ESDK-START: Add Encryption to store const Body = fileStream . pipe ( encryptStream ( encryptKeyring )); // Save and exit 1 2 3 4 5 6 // Edit ./store.js // ADD-ESDK-START: Add Encryption to store const Body = fileStream . pipe ( encryptStream ( encryptKeyring )); // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 # Edit src/document_bucket/api.py # Find the store function and edit it to add the Master Key Provider # and to write the encrypted data # ADD-ESDK-START: Add Encryption to store client = aws_encryption_sdk . EncryptionSDKClient ( commitment_policy = CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) encrypted_data , header = client . encrypt ( source = data , key_provider = self . master_key_provider , ) ... self . _write_object ( encrypted_data , item )","title":"Step 2: Add Encryption to store"},{"location":"adding-the-encryption-sdk/#what-happened_1","text":"The application will use the AWS Encryption SDK to encrypt your data client-side under a KMS Key before storing it by: Requesting a new data key using your Keyring or Master Key Provider Encrypting your data with the returned data key Returning your encrypted data in the AWS Encryption SDK message format Extracting the ciphertext from the AWS Encryption SDK message Passing the ciphertext to the AWS S3 SDK for storage in S3","title":"What Happened?"},{"location":"adding-the-encryption-sdk/#step-3-add-decryption-to-retrieve","text":"Now that the application encypts your data before storing it, it will need to decrypt your data before returning it to the caller (at least for the data to be useful, anyway). Java Typescript Node.JS JavaScript Node.JS Python 1 2 3 4 5 6 7 8 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java // Find retrieve(...) byte [] data = getObjectData ( key ); // ADD-ESDK-START: Add Decryption to retrieve CryptoResult < byte [] , KmsMasterKey > decryptedMessage = awsEncryptionSdk . decryptData ( mkp , data ); PointerItem pointer = getPointerItem ( key ); // ADD-ESDK-START: Add Decryption to retrieve return DocumentBundle . fromDataAndPointer ( decryptedMessage . getResult (), pointer ); 1 2 3 4 5 6 7 8 9 // Edit ./src/retrieve.ts // ADD-ESDK-START: Add Decryption to retrieve return s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )); // Save and Exit 1 2 3 4 5 6 7 8 9 // Edit ./retrieve.js // ADD-ESDK-START: Add Decryption to retrieve return s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )); // Save and Exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Edit src/document_bucket/api.py # Find the retrieve function and edit it to add a call to decrypt the # encrypted data before returning it item = self . _get_pointer_item ( PointerQuery . from_key ( pointer_key )) # ADD-ESDK-START: Add Decryption to retrieve encrypted_data = self . _get_object ( item ) client = aws_encryption_sdk . EncryptionSDKClient ( commitment_policy = CommitmentPolicy . REQUIRE_ENCRYPT_REQUIRE_DECRYPT ) plaintext , header = client . decrypt ( source = encrypted_data , key_provider = self . master_key_provider ) return DocumentBundle . from_data_and_context ( plaintext , item . context ) # Save and exit","title":"Step 3: Add Decryption to retrieve"},{"location":"adding-the-encryption-sdk/#what-happened_2","text":"The application now decrypts data client-side, as well. The data returned from S3 for retrieve is encrypted. Before returning that data to the user, you added a call to the AWS Encryption SDK to decrypt the data. Under the hood, the Encryption SDK is: Reading the AWS Encryption SDK formatted encrypted message Calling KMS to request to decrypt your message's encrypted data key using the Faythe KMS Key Using the decrypted data key to decrypt the message Returning the message plaintext and Encryption SDK headers to you","title":"What Happened?"},{"location":"adding-the-encryption-sdk/#step-4-configure-the-faythe-kms-key-in-the-encryption-sdk","text":"Now that you have declared your dependencies and updated your code to encrypt and decrypt data, the final step is to pass through the configuration to the AWS Encryption SDK to start using your KMS Keys to protect your data. Java Typescript Node.JS JavaScript Node.JS Python 1 2 3 4 5 6 7 8 9 10 11 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java AmazonS3 s3Client = AmazonS3ClientBuilder . defaultClient (); // ADD-ESDK-START: Configure the Faythe KMS Key in the Encryption SDK // Load configuration of KMS resources String faytheKmsKey = stateConfig . contents . state . FaytheKmsKey ; // Set up the Master Key Provider to use KMS KmsMasterKeyProvider mkp = KmsMasterKeyProvider . builder (). buildStrict ( faytheKmsKey ); return new Api ( ddbClient , tableName , s3Client , bucketName , mkp ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Edit ./src/store.ts // ADD-ESDK-START: Configure the Faythe KMS Key in the Encryption SDK const faytheKmsKey = config . state . getFaytheKmsKey (); const encryptKeyring = new KmsKeyringNode ({ generatorKeyId : faytheKmsKey }); // Save and exit // Edit ./src/retrieve.ts // ADD-ESDK-START: Set up a keyring to use Faythe's KMS Key for decrypting. const faytheKmsKey = config . state . getFaytheKmsKey (); const decryptKeyring = new KmsKeyringNode ({ keyIds : [ faytheKmsKey ] }); // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Edit ./store.js // ADD-ESDK-START: Configure the Faythe KMS Key in the Encryption SDK const faytheKmsKey = config . state . getFaytheKmsKey (); const encryptKeyring = new KmsKeyringNode ({ generatorKeyId : faytheKmsKey }); // Save and exit // Edit ./retrieve.js // ADD-ESDK-START: Set up a keyring to use Faythe's KMS Key for decrypting. const faytheKmsKey = config . state . getFaytheKmsKey (); const decryptKeyring = new KmsKeyringNode ({ keyIds : [ faytheKmsKey ] }); // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Edit src/document_bucket/__init__.py ... # ADD-ESDK-START: Configure the Faythe KMS Key in the Encryption SDK # Pull configuration of KMS resources faythe_kms_key = state [ \"FaytheKmsKey\" ] # And the Master Key Provider configuring how to use KMS kms_key = [ faythe_kms_key ] mkp = aws_encryption_sdk . StrictAwsKmsMasterKeyProvider ( key_ids = kms_key ) operations = DocumentBucketOperations ( bucket , table , mkp ) # Save and exit","title":"Step 4: Configure the Faythe KMS Key in the Encryption SDK"},{"location":"adding-the-encryption-sdk/#what-happened_3","text":"In Getting Started , you launched CloudFormation stacks for KMS Keys. One of these KMS Keys was nicknamed Faythe. As part of launching these templates, the KMS Key's Amazon Resource Name (ARN) was written to a configuration file on disk, the state variable that is loaded and parsed. Now Faythe's ARN is pulled into a variable, and used to initialize a Keyring or Master Key Provider that will use the Faythe KMS Key. That new Keyring/Master Key Provider is passed into your API, and you are set to start encrypting and decrypting with KMS and the Encryption SDK.","title":"What Happened?"},{"location":"adding-the-encryption-sdk/#checking-your-work","text":"Want to check your progress, or compare what you've done versus a finished example? Check out the code in one of the -complete folders to compare. Java Typescript Node.JS JavaScript Node.JS Python 1 cd ~/environment/workshop/exercises/java/add-esdk-complete 1 cd ~/environment/workshop/exercises/node-typescript/add-esdk-complete 1 cd ~/environment/workshop/exercises/node-javascript/add-esdk-complete 1 cd ~/environment/workshop/exercises/python/add-esdk-complete","title":"Checking Your Work"},{"location":"adding-the-encryption-sdk/#try-it-out","text":"Now that the code is written, let's load it up and try it out. If you'd like to try a finished example, use your language's -complete directory as described above. Experiment using the API as much as you like. To get started, here are some things to try: Compare CloudTrail Logs for usages of Faythe when you encrypt messages of different sizes (small, medium, large) Take a look at the contents of your S3 Document Bucket to inspect the raw object For more things to try, check out Explore Further , below. Java JavaScript Node.JS JavaScript Node.JS CLI Typescript Node.JS Typescript Node.JS CLI Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Compile your code mvn compile // To use the API programmatically, use this target to launch jshell mvn jshell : run / open startup . jsh Api documentBucket = App . initializeDocumentBucket (); documentBucket . list (); documentBucket . store ( \"Store me in the Document Bucket!\" . getBytes ()); for ( PointerItem item : documentBucket . list ()) { DocumentBundle document = documentBucket . retrieve ( item . partitionKey (). getS ()); System . out . println ( document . getPointer (). partitionKey (). getS () + \" : \" + new String ( document . getData (), java . nio . charset . StandardCharsets . UTF_8 )); } // Ctrl+D to exit jshell // Or, to run logic that you write in App.java, use this target after compile mvn exec : java 1 2 3 4 5 6 7 8 9 10 11 12 13 node list = require ( \"./list.js\" ) store = require ( \"./store.js\" ) retrieve = require ( \"./retrieve\" ) list (). then ( console . log ) store ( fs . createReadStream ( \"./store.js\" )). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) (() => { retrieve ( key ). pipe ( process . stdout )})() // Ctrl-D when finished to exit the REPL 1 2 3 4 5 6 ./cli.js list ./cli.js store ./store.js # Note the \"Key\" value ./cli.js list # Note the \"reference\" value ./cli.js retrieve $KeyOrReferenceValue 1 2 3 4 5 6 7 8 9 10 11 12 13 node - r ts - node / register ;({ list } = require ( \"./src/list.ts\" )) ;({ store } = require ( \"./src/store.ts\" )) ;({ retrieve } = require ( \"./src/retrieve.ts\" )) list (). then ( console . log ) store ( fs . createReadStream ( \"./src/store.ts\" )). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) (() => { retrieve ( key ). pipe ( process . stdout )})() // Ctrl-D when finished to exit the REPL 1 2 3 4 5 6 ./cli.ts list ./cli.ts store ./src/store.ts # Note the \"Key\" value ./cli.ts list # Note the \"reference\" value ./cli.ts retrieve $KeyOrReferenceValue 1 2 3 4 5 6 7 8 tox - e repl import document_bucket ops = document_bucket . initialize () ops . list () ops . store ( b 'some data' ) ops . list () ops . retrieve ( \"PutYourKeyHere\" ) . data # Ctrl-D when finished to exit the REPL","title":"Try it Out"},{"location":"adding-the-encryption-sdk/#explore-further","text":"AWS Cloud Development Kit - Check out the ~/environment/workshop/cdk directory to see how the workshop resources are described using CDK. Alice, Bob, and Friends - Who are Faythe and Walter? Leveraging the Message Format - The AWS Encryption SDK Message Format is an open standard. Can you write something to detect whether an entry in the Document Bucket has been encrypted in this format or not, and retrieve or decrypt appropriately? More Test Content - Small test strings are enough to get started, but you might be curious to see what the behavior and performance looks like with larger documents. What if you add support for loading files to and from disk to the Document Bucket? Configuration Glue - If you are curious how the Document Bucket is configured, take a peek at ~/environment/workshop/cdk/Makefile and the make state target, as well as config.toml in the exercises root ~/environment/workshop/exercises/config.toml . The Busy Engineer's Document Bucket uses a base TOML file to set standard names for all CloudFormation resources and a common place to discover the real deployed set. Then it uses the AWS Cloud Development Kit (CDK) to deploy the resources and write out their identifiers to the state file. Applications use the base TOML file config.toml to locate the state file and pull the expected resource names. And that's how the system bootstraps all the resources it needs!","title":"Explore Further"},{"location":"adding-the-encryption-sdk/#next-exercise","text":"Now that you are encrypting and decrypting, how about adding Multiple KMS Keys ?","title":"Next exercise"},{"location":"clean-up-and-closing/","text":"Thank You! Thank you for working through the workshop today. We hope that you found it to be useful in getting started with client-side encryption using the AWS Encryption SDK and AWS KMS. Cleaning Up There are helper scripts available to help you completely tear down your stack resources. Emptying Your Document Bucket To remove the contents of your test S3 bucket so that CloudFormation can completely delete the stack, do the following: 1 2 cd ~/environment/workshop/cdk make data_purge Deleting Your Document Bucket Resource Stacks After emptying your Document Bucket, you can now use CDK to destroy your stack. 1 2 cd ~/environment/workshop/cdk npx cdk destroy BusyEngineer* Shutting Down Cloud9 Use the CloudFormation console to delete your Cloud9 stack. Open the CloudFormation Console Select the \"BusyEngineersDocumentBucketEnvironment\" stack Press \"Delete\" Finished! That's it! Your workshop resources have been torn down. Use the CloudFormation console in both regions to confirm your resources are all successfully cleaned up. CloudFormation in us-east-2 (Cloud9, Document Bucket resources, Faythe) CloudFormation in us-west-2 (Walter) Feedback We welcome comments, questions, concerns, contributions, and feature requests on our GitHub page for the Busy Engineer's Document Bucket . If there is content that can be improved or anything that you would like to see, we would like to cover it for you. At AWS Cryptography, our mission is to make tools that are easy to use, hard to misuse, and that help our customers protect their most sensitive data wherever and whenever it is. We look forward to hearing from you about this workshop or your needs. Thank you again for your time, and go forth and be secure!","title":"Clean Up and Closing"},{"location":"clean-up-and-closing/#thank-you","text":"Thank you for working through the workshop today. We hope that you found it to be useful in getting started with client-side encryption using the AWS Encryption SDK and AWS KMS.","title":"Thank You!"},{"location":"clean-up-and-closing/#cleaning-up","text":"There are helper scripts available to help you completely tear down your stack resources.","title":"Cleaning Up"},{"location":"clean-up-and-closing/#emptying-your-document-bucket","text":"To remove the contents of your test S3 bucket so that CloudFormation can completely delete the stack, do the following: 1 2 cd ~/environment/workshop/cdk make data_purge","title":"Emptying Your Document Bucket"},{"location":"clean-up-and-closing/#deleting-your-document-bucket-resource-stacks","text":"After emptying your Document Bucket, you can now use CDK to destroy your stack. 1 2 cd ~/environment/workshop/cdk npx cdk destroy BusyEngineer*","title":"Deleting Your Document Bucket Resource Stacks"},{"location":"clean-up-and-closing/#shutting-down-cloud9","text":"Use the CloudFormation console to delete your Cloud9 stack. Open the CloudFormation Console Select the \"BusyEngineersDocumentBucketEnvironment\" stack Press \"Delete\"","title":"Shutting Down Cloud9"},{"location":"clean-up-and-closing/#finished","text":"That's it! Your workshop resources have been torn down. Use the CloudFormation console in both regions to confirm your resources are all successfully cleaned up. CloudFormation in us-east-2 (Cloud9, Document Bucket resources, Faythe) CloudFormation in us-west-2 (Walter)","title":"Finished!"},{"location":"clean-up-and-closing/#feedback","text":"We welcome comments, questions, concerns, contributions, and feature requests on our GitHub page for the Busy Engineer's Document Bucket . If there is content that can be improved or anything that you would like to see, we would like to cover it for you. At AWS Cryptography, our mission is to make tools that are easy to use, hard to misuse, and that help our customers protect their most sensitive data wherever and whenever it is. We look forward to hearing from you about this workshop or your needs. Thank you again for your time, and go forth and be secure!","title":"Feedback"},{"location":"encryption-context/","text":"Exercise 3: Working With Encryption Context In this section, you will work with encryption context and explore its use in the Document Bucket and other applications. Background The Busy Engineer's Document Bucket has metadata, called context , associated with each document. This metadata is a set of key-value string pairs, associated with the item in DynamoDB, searchable there, and attached to the S3 object as well. One of the features AWS KMS and the AWS Encryption SDK both provide is called encryption context. At its core, encryption context is this metadata mapping: keys that are associated with context about the object, and values indicating information about what that context is. All the information in the map is non-secret, and is the basis for several feature integrations. One useful model for thinking about encryption context is as Assertions about the Five Ws : Who, What, Where, When, Why. For example: Who should have access to this decrypted data? What data is being decrypted? Where is the decryption happening? When is this data being used? Why is this data being decrypted? AWS KMS: KMS Operations and Encryption Context AWS KMS allows you to specify an encryption context on kms:Encrypt . If you do so, you must provide the exact same encryption context on kms:Decrypt , or the operation will fail. (The match is case-sensitive, and key-value pairs are compared in an order independent way.) Behind the scenes, KMS is cryptographically binding the encryption context to the key material you are kms:Encrypt or kms:Decrypt ing as Additional Authenticated Data (AAD) . In short, this is non-secret data that must be identical (not tampered-with or incomplete), or decryption fails. This feature defends against risks from ciphertexts being tampered with, modified, or replaced -- intentionally or unintentionally. It both defends against an attacker replacing one ciphertext with another as well as problems like operational events. For example, if a bad deployment swaps us-west-2.cfg with eu-central-1.cfg on your fleets, having { fleet: us-west-2 } asserted in us-west-2.cfg 's encryption context will prevent it from accidentally being loaded by eu-central-1 . AWS KMS: Policy and Audit Hooks KMS also makes the encryption context available to use in Key Policies and Grants. This means that you can use assertions you make about your data to control usage of your KMS Keys. Perhaps your eu-central-1 fleet should only ever be permitted to access encrypted data for { shard: europe } . You can write KMS Key policies that require { shard: europe } to be asserted about all cryptographic operations, so that KMS refuses to authorize an attempt to decrypt, say, { shard: north-america } . These options can help you secure your application and defend against both operational and security-related risks. Additionally, as part of the audit features that KMS provides, it logs the encryption context that was supplied with every operation. You can use this information to audit who was accessing what data and when, to detect anomalous call patterns, or to identify unexpected system states. What questions would you like to answer with CloudTrail Logs for your KMS operations? encryption context can help. The AWS Encryption SDK The AWS Encryption SDK includes the encryption context as a core component. Encryption context may be supplied on encrypt -- it is optional, both for the Encryption SDK and for KMS, but strongly recommended. The Encryption SDK writes the encryption context in the encrypted message format. And on decrypt, the Encryption SDK validates the encryption context with KMS and returns the contents to you for you to make assertions about the contents. Using the Encryption SDK with KMS, you can use all of KMS' policy and audit features from encryption context, and use the Encryption SDK to make assertions to safeguard your application. Use in the Document Bucket So how can encryption context be useful in the Document Bucket? In this exercise, you will walk through a few examples of how leveraging encryption context can help you secure and audit your application, and even build some convenience features. The Document Bucket already has the context map available for operations. It writes the context to the DynamoDB records for objects as well, and generates searchable DynamoDB records for context keys, to let you find documents that have certain attributes. Now you will plumb that context through the AWS Encryption SDK, so that KMS and the Encryption SDK bind those properties as security assertions about your data. You will also add an assertion facility to ensure that your data is what you expect it to be when you call retrieve . What this means is that with this change, you will be able to use encryption context to defend against these kind of risks: DynamoDB record updates that create metadata mismatches between a document and its properties Swapping objects in S3 so that the data is no longer what it was expected to be Accidentally loading the wrong data blob Defending against objects being listed as having a certain context key / property when they actually do not Also, after this change, the contents of context will be available in audit log entries written by KMS, and you can now use that metadata in your Key Policies and Grants. Remember, encryption context is not secret! Let's Go! Starting Directory If you just finished Using Multiple KMS Keys , you are all set. If you aren't sure, or want to catch up, jump into the encryption-context-start directory for the language of your choice. Java JavaScript Node.JS Typescript Node.JS Python 1 cd ~/environment/workshop/exercises/java/encryption-context-start 1 cd ~/environment/workshop/exercises/node-javascript/encryption-context-start 1 cd ~/environment/workshop/exercises/node-typescript/encryption-context-start 1 cd ~/environment/workshop/exercises/python/encryption-context-start Step 1: Set Encryption Context on Encrypt Java JavaScript Node.JS Typescript Node.JS Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java ... import java.util.Map ; import java.util.NoSuchElementException ; import java.util.Set ; ... public PointerItem store ( byte [] data , Map < String , String > context ) { // ENCRYPTION-CONTEXT-START: Set Encryption Context on Encrypt CryptoResult < byte [] , KmsMasterKey > encryptedMessage = awsEncryptionSdk . encryptData ( mkp , data , context ); DocumentBundle bundle = DocumentBundle . fromDataAndContext ( encryptedMessage . getResult (), context ); // Save your changes 1 2 3 4 5 6 7 // Edit ./store.js // ENCRYPTION-CONTEXT-START: Set encryption context on Encrypt const Body = fileStream . pipe ( encryptStream ( encryptKeyring , { encryptionContext }) ); // Save your changes 1 2 3 4 5 6 7 // Edit ./src/store.ts // ENCRYPTION-CONTEXT-START: Set encryption context on Encrypt const Body = fileStream . pipe ( encryptStream ( encryptKeyring , { encryptionContext }) ); // Save your changes 1 2 3 4 5 6 7 8 9 10 11 # Edit src/document_bucket/api.py # Find the store(...) function, and add context to the encrypt call # ENCRYPTION-CONTEXT-START: Set encryption context on Encrypt encrypted_data , header = self . encryption_client . encrypt ( source = data , key_provider = self . master_key_provider , encryption_context = context , ) # Save your changes What Happened? The Document Bucket context will now be supplied to the AWS Encryption SDK and AWS KMS as encryption context. If a non-empty key-value pair map is supplied to store , those key-value pairs will be used in encryption and decryption operations all the way through to KMS: The contents of context will appear in KMS audit logs. The contents of context will be availble to use in KMS Key Policies and Grants to make authorization decisions. The contents of context will be written to the Encryption SDK message. Supplying the exact-match contents of context will be required to decrypt any encrypted data keys. The contents of context will now be available on Decrypt to use in making assertions. Next you will update retrieve to use the encryption context on decrypt. Step 2: Use Encryption Context on Decrypt Java JavaScript Node.JS Typescript Node.JS Python 1 2 3 4 5 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java and find retrieve(...) // ENCRYPTION-CONTEXT-START: Use Encryption Context on Decrypt Map < String , String > actualContext = decryptedMessage . getEncryptionContext (); PointerItem pointer = PointerItem . fromKeyAndContext ( key , actualContext ); // Save your changes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Edit ./retrieve.js return ( s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )) // ENCRYPTION-CONTEXT-START: Making Assertions . once ( \"MessageHeader\" , function ( header ) { }) ); // Save your changes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Edit ./src/retrieve.ts return ( s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )) // ENCRYPTION-CONTEXT-START: Making Assertions . once ( \"MessageHeader\" , function ( this : Writable , header : MessageHeader ) { }) ); // Save your changes 1 2 3 4 5 6 7 8 9 10 # Edit src/document_bucket/api.py # Find the retrieve(...) function, and use the Encryption SDK header's encryption # context to construct the DocumentBundle to return # ENCRYPTION-CONTEXT-START: Use encryption context on Decrypt return DocumentBundle . from_data_and_context ( plaintext , header . encryption_context ) # Save your changes What Happened? Now on decrypt, the validated encryption context from the Encryption SDK Message Format header will be passed back to the application. Any business logic that would benefit from using the encryption context data for making decisions can use the version bound and validated by the Encryption SDK and KMS. Next you will add a mechanism for the application to test assertions made in encryption context before working with the returned data. Step 3: Making Assertions Java JavaScript Node.JS Typescript Node.JS Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java and find retrieve(...) // ENCRYPTION-CONTEXT-START: Making Assertions boolean allExpectedContextKeysFound = actualContext . keySet (). containsAll ( expectedContextKeys ); if ( ! allExpectedContextKeysFound ) { // Remove all of the keys that were found expectedContextKeys . removeAll ( actualContext . keySet ()); String error = String . format ( \"Expected context keys were not found in the actual encryption context! \" + \"Missing keys were: %s\" , expectedContextKeys . toString ()); throw new DocumentBucketException ( error , new NoSuchElementException ()); } boolean allExpectedContextFound = actualContext . entrySet (). containsAll ( expectedContext . entrySet ()); if ( ! allExpectedContextFound ) { Set < Map . Entry < String , String >> expectedContextEntries = expectedContext . entrySet (); expectedContextEntries . removeAll ( actualContext . entrySet ()); String error = String . format ( \"Expected context pairs were not found in the actual encryption context! \" + \"Missing pairs were: %s\" , expectedContextEntries . toString ()); throw new DocumentBucketException ( error , new NoSuchElementException ()); } // Save your work 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // Edit ./retrieve.js return ( s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )) // ENCRYPTION-CONTEXT-START: Making Assertions . once ( \"MessageHeader\" , function ( header ) { const { encryptionContext } = header ; const pairs = Object . entries ( expectedContext || {}); const keys = ( expectedContextKeys || []). slice (); if ( ! ( pairs . every (([ key , value ]) => encryptionContext [ key ] === value ) && keys . every ( key => Object . hasOwnProperty . call ( encryptionContext , key ) ) ) ) { this . emit ( \"error\" , new Error ( \"Encryption context does not match expected shape\" ) ); } }) ); // Save your changes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // Edit ./src/retrieve.ts import { EC } from \"./store\" ; import { Writable } from \"stream\" ; const Bucket = config . state . bucketName (); ... return ( s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )) // ENCRYPTION-CONTEXT-START: Making Assertions . once ( \"MessageHeader\" , function ( this : Writable , header : MessageHeader ) { const { encryptionContext } = header ; const pairs = Object . entries ( expectedContext || {}); const keys = ( expectedContextKeys || []). slice (); if ( ! ( pairs . every (([ key , value ]) => encryptionContext [ key ] === value ) && keys . every ( key => Object . hasOwnProperty . call ( encryptionContext , key ) ) ) ) { this . emit ( \"error\" , new Error ( \"Encryption context does not match expected shape\" ) ); } }) ); // Save your changes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Edit src/document_bucket/api.py # Find the retrieve(...) function, and add some assertions about the contents # of the encryption context validated by the Encryption SDK # ENCRYPTION-CONTEXT-START: Making Assertions if not expected_context_keys <= header . encryption_context . keys (): error_msg = ( \"Encryption context assertion failed! \" f \"Expected all these keys: { expected_context_keys } , \" f \"but got { header . encryption_context } !\" ) raise AssertionError ( error_msg ) if not expected_context . items () <= header . encryption_context . items (): error_msg = ( \"Encryption context assertion failed! \" f \"Expected { expected_context } , \" f \"but got { header . encryption_context } !\" ) raise AssertionError ( error_msg ) # ENCRYPTION-CONTEXT-START: Use Encryption Context on Decrypt return DocumentBundle . from_data_and_context ( plaintext , header . encryption_context ) What Happened? retrieve will use its \"expected context keys\" argument to validate that all of those keys (with any associated values) are present in the encryption context. retrieve will also use its \"expected context\" argument to validate that the exact key-value pairs specified in expected context are present in the actual encryption context. If either of those assumptions is invalid, retrieve will raise an exception before returning the data. These assertions safeguard against accidentally returning unintended, corrupted, or tampered data to the application. Now the Document Bucket will use AWS KMS and the AWS Encryption SDK to ensure that the context metadata is consistent throughout the lifetime of the objects, resistant to tampering or corruption, and make the validated context available to the application logic to make additional business logic assertions safely. Checking Your Work If you want to check your progress, or compare what you've done versus a finished example, check out the code in one of the -complete folders to compare. There is a -complete folder for each language. Java JavaScript Node.JS Typescript Node.JS Python 1 cd ~/environment/workshop/exercises/java/encryption-context-complete 1 cd ~/environment/workshop/exercises/node-javascript/encryption-context-complete 1 cd ~/environment/workshop/exercises/node-typescript/encryption-context-complete 1 cd ~/environment/workshop/exercises/python/encryption-context-complete Try it Out Now that you pass encryption context all the way through to KMS and validate it on return, what assertions do you want to make about your data? Here's some ideas for things to test: Expecting exact match of key-value pairs for keys like stage , shard , and source-fleet Expecting a set of keys to be present like submit-date and category Expecting an exact match of a subset of the supplied key-value pairs (e.g. only stage and shard , not source-fleet ) Doing the same for expected keys with any value Adding a constraint of a new key that you didn't supply at encryption time Adding a constraint with a different value, like stage=production Changing capitalization Using sorted versus unsorted mappings, such as java.util.SortedMap<K, V> in Java or collections.OrderedDict in Python There's a few simple suggestions to get you started in the snippets below. Java JavaScript Node.JS JavaScript Node.JS CLI Typescript Node.JS Typescript Node.JS CLI Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Compile your code mvn compile // To use the API programmatically, use this target to launch jshell mvn jshell:run /open startup.jsh import java.util.HashMap ; Api documentBucket = App.initializeDocumentBucket () ; HashMap<String, String> context = new HashMap<String, String> () ; context.put ( \"shard\" , \"test\" ) ; context.put ( \"app\" , \"document-bucket\" ) ; context.put ( \"origin\" , \"development\" ) ; documentBucket.list () ; PointerItem item = documentBucket.store ( \"Store me in the Document Bucket!\" .getBytes () , context ) ; DocumentBundle document = documentBucket.retrieve ( item.partitionKey () .getS () , context ) ; System.out.println ( document.getPointer () .partitionKey () .getS () + \" : \" + new String ( document.getData () , java.nio.charset.StandardCharsets.UTF_8 )) ; // Ctrl+D to exit jshell // Or, to run logic that you write in App.java, use this target after compile mvn exec:java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 node list = require ( \"./list.js\" ) store = require ( \"./store.js\" ) retrieve = require ( \"./retrieve\" ) list (). then ( console . log ) encryptionContext = { stage : \"demo\" , purpose : \"simple demonstration\" , origin : \"us-east-2\" } store ( fs . createReadStream ( \"./store.js\" ), encryptionContext ). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) retrieve ( key , { expectedContext : { stage : \"demo\" }, expectedContextKeys : [ \"purpose\" ] }). pipe ( process . stdout ) // Ctrl-D when finished to exit the REPL 1 2 3 4 5 6 7 8 9 10 11 ./cli.js list ./cli.js store ./store.js \\ -c \"stage:demo\" \\ -c \"purpose:simple demonstration\" \\ -c \"origin:us-east-2\" # Note the \"Key\" value ./cli.js list # Note the \"reference\" value ./cli.js retrieve $KeyOrReferenceValue \\ -c \"stage:demo\" \\ -k purpose 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 node - r ts - node / register ;({ list } = require ( \"./src/list.ts\" )) ;({ store } = require ( \"./src/store.ts\" )) ;({ retrieve } = require ( \"./src/retrieve.ts\" )) list (). then ( console . log ) encryptionContext = { stage : \"demo\" , purpose : \"simple demonstration\" , origin : \"us-east-2\" } store ( fs . createReadStream ( \"./src/store.ts\" ), encryptionContext ). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) retrieve ( key , { expectedContext : { stage : \"demo\" }, expectedContextKeys : [ \"purpose\" ] }). pipe ( process . stdout ) // Ctrl-D when finished to exit the REPL 1 2 3 4 5 6 7 8 9 10 11 ./cli.ts list ./cli.ts store ./src/store.ts \\ -c \"stage:demo\" \\ -c \"purpose:simple demonstration\" \\ -c \"origin:us-east-2\" # Note the \"Key\" value ./cli.ts list # Note the \"reference\" value ./cli.ts retrieve $KeyOrReferenceValue \\ -c \"stage:demo\" \\ -k purpose 1 2 3 4 5 6 7 8 tox - e repl import document_bucket ops = document_bucket . initialize () context = { \"host\" : \"cloud9\" , \"shard\" : \"development\" , \"purpose\" : \"experimental\" } ops . list () item = ops . store ( b 'some data' , context ) print ( ops . retrieve ( item . partition_key , expected_context = context )) # Ctrl-D when finished to exit the REPL Explore Further Encryption context can provide different types of features and guardrails in your application logic. Consider these ideas for further exploration: Detecting Drift - context contents are stored on the DynamoDB item. S3 has object metadata that could also use the context pairs. How would you use the validated encryption context to validate and guardrail those two data sources? What could that feature add to your application? Meta-operations on Encryption Context - the encryption context is stored on the open-specification AWS Encryption SDK Message Format . Would it help your system to write tools to process the metadata -- such as the encryption context -- on the message format? DynamoDB Keys and Indexes - the Document Bucket adds composite indexes by context key. What about adding composite keys by key-value pairs? If you know a particular key should always be present in well-formed encrypted data, perhaps that should also be a Secondary Index ? Enforing EC Keys - If you know that there is a key that should always be present, and that you want to index on in DynamoDB, do you want to enforce that it's always present? You can extend the Cryptographic Materials Manager component in the AWS Encryption SDK to enforce this during cryptographic operations. Alarms and Monitoring - How can you leverage encryption context and CloudWatch Alarms for CloudTrail to monitor and protect your application? Next exercise Congratulations! You have officially completed the Busy Engineer's Document Bucket workshop. Proceed to Clean Up and Closing to tear down your workshop environment.","title":"Exercise 3"},{"location":"encryption-context/#exercise-3-working-with-encryption-context","text":"In this section, you will work with encryption context and explore its use in the Document Bucket and other applications.","title":"Exercise 3: Working With Encryption Context"},{"location":"encryption-context/#background","text":"The Busy Engineer's Document Bucket has metadata, called context , associated with each document. This metadata is a set of key-value string pairs, associated with the item in DynamoDB, searchable there, and attached to the S3 object as well. One of the features AWS KMS and the AWS Encryption SDK both provide is called encryption context. At its core, encryption context is this metadata mapping: keys that are associated with context about the object, and values indicating information about what that context is. All the information in the map is non-secret, and is the basis for several feature integrations. One useful model for thinking about encryption context is as Assertions about the Five Ws : Who, What, Where, When, Why. For example: Who should have access to this decrypted data? What data is being decrypted? Where is the decryption happening? When is this data being used? Why is this data being decrypted?","title":"Background"},{"location":"encryption-context/#aws-kms-kms-operations-and-encryption-context","text":"AWS KMS allows you to specify an encryption context on kms:Encrypt . If you do so, you must provide the exact same encryption context on kms:Decrypt , or the operation will fail. (The match is case-sensitive, and key-value pairs are compared in an order independent way.) Behind the scenes, KMS is cryptographically binding the encryption context to the key material you are kms:Encrypt or kms:Decrypt ing as Additional Authenticated Data (AAD) . In short, this is non-secret data that must be identical (not tampered-with or incomplete), or decryption fails. This feature defends against risks from ciphertexts being tampered with, modified, or replaced -- intentionally or unintentionally. It both defends against an attacker replacing one ciphertext with another as well as problems like operational events. For example, if a bad deployment swaps us-west-2.cfg with eu-central-1.cfg on your fleets, having { fleet: us-west-2 } asserted in us-west-2.cfg 's encryption context will prevent it from accidentally being loaded by eu-central-1 .","title":"AWS KMS: KMS Operations and Encryption Context"},{"location":"encryption-context/#aws-kms-policy-and-audit-hooks","text":"KMS also makes the encryption context available to use in Key Policies and Grants. This means that you can use assertions you make about your data to control usage of your KMS Keys. Perhaps your eu-central-1 fleet should only ever be permitted to access encrypted data for { shard: europe } . You can write KMS Key policies that require { shard: europe } to be asserted about all cryptographic operations, so that KMS refuses to authorize an attempt to decrypt, say, { shard: north-america } . These options can help you secure your application and defend against both operational and security-related risks. Additionally, as part of the audit features that KMS provides, it logs the encryption context that was supplied with every operation. You can use this information to audit who was accessing what data and when, to detect anomalous call patterns, or to identify unexpected system states. What questions would you like to answer with CloudTrail Logs for your KMS operations? encryption context can help.","title":"AWS KMS: Policy and Audit Hooks"},{"location":"encryption-context/#the-aws-encryption-sdk","text":"The AWS Encryption SDK includes the encryption context as a core component. Encryption context may be supplied on encrypt -- it is optional, both for the Encryption SDK and for KMS, but strongly recommended. The Encryption SDK writes the encryption context in the encrypted message format. And on decrypt, the Encryption SDK validates the encryption context with KMS and returns the contents to you for you to make assertions about the contents. Using the Encryption SDK with KMS, you can use all of KMS' policy and audit features from encryption context, and use the Encryption SDK to make assertions to safeguard your application.","title":"The AWS Encryption SDK"},{"location":"encryption-context/#use-in-the-document-bucket","text":"So how can encryption context be useful in the Document Bucket? In this exercise, you will walk through a few examples of how leveraging encryption context can help you secure and audit your application, and even build some convenience features. The Document Bucket already has the context map available for operations. It writes the context to the DynamoDB records for objects as well, and generates searchable DynamoDB records for context keys, to let you find documents that have certain attributes. Now you will plumb that context through the AWS Encryption SDK, so that KMS and the Encryption SDK bind those properties as security assertions about your data. You will also add an assertion facility to ensure that your data is what you expect it to be when you call retrieve . What this means is that with this change, you will be able to use encryption context to defend against these kind of risks: DynamoDB record updates that create metadata mismatches between a document and its properties Swapping objects in S3 so that the data is no longer what it was expected to be Accidentally loading the wrong data blob Defending against objects being listed as having a certain context key / property when they actually do not Also, after this change, the contents of context will be available in audit log entries written by KMS, and you can now use that metadata in your Key Policies and Grants. Remember, encryption context is not secret!","title":"Use in the Document Bucket"},{"location":"encryption-context/#lets-go","text":"","title":"Let's Go!"},{"location":"encryption-context/#starting-directory","text":"If you just finished Using Multiple KMS Keys , you are all set. If you aren't sure, or want to catch up, jump into the encryption-context-start directory for the language of your choice. Java JavaScript Node.JS Typescript Node.JS Python 1 cd ~/environment/workshop/exercises/java/encryption-context-start 1 cd ~/environment/workshop/exercises/node-javascript/encryption-context-start 1 cd ~/environment/workshop/exercises/node-typescript/encryption-context-start 1 cd ~/environment/workshop/exercises/python/encryption-context-start","title":"Starting Directory"},{"location":"encryption-context/#step-1-set-encryption-context-on-encrypt","text":"Java JavaScript Node.JS Typescript Node.JS Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java ... import java.util.Map ; import java.util.NoSuchElementException ; import java.util.Set ; ... public PointerItem store ( byte [] data , Map < String , String > context ) { // ENCRYPTION-CONTEXT-START: Set Encryption Context on Encrypt CryptoResult < byte [] , KmsMasterKey > encryptedMessage = awsEncryptionSdk . encryptData ( mkp , data , context ); DocumentBundle bundle = DocumentBundle . fromDataAndContext ( encryptedMessage . getResult (), context ); // Save your changes 1 2 3 4 5 6 7 // Edit ./store.js // ENCRYPTION-CONTEXT-START: Set encryption context on Encrypt const Body = fileStream . pipe ( encryptStream ( encryptKeyring , { encryptionContext }) ); // Save your changes 1 2 3 4 5 6 7 // Edit ./src/store.ts // ENCRYPTION-CONTEXT-START: Set encryption context on Encrypt const Body = fileStream . pipe ( encryptStream ( encryptKeyring , { encryptionContext }) ); // Save your changes 1 2 3 4 5 6 7 8 9 10 11 # Edit src/document_bucket/api.py # Find the store(...) function, and add context to the encrypt call # ENCRYPTION-CONTEXT-START: Set encryption context on Encrypt encrypted_data , header = self . encryption_client . encrypt ( source = data , key_provider = self . master_key_provider , encryption_context = context , ) # Save your changes","title":"Step 1: Set Encryption Context on Encrypt"},{"location":"encryption-context/#what-happened","text":"The Document Bucket context will now be supplied to the AWS Encryption SDK and AWS KMS as encryption context. If a non-empty key-value pair map is supplied to store , those key-value pairs will be used in encryption and decryption operations all the way through to KMS: The contents of context will appear in KMS audit logs. The contents of context will be availble to use in KMS Key Policies and Grants to make authorization decisions. The contents of context will be written to the Encryption SDK message. Supplying the exact-match contents of context will be required to decrypt any encrypted data keys. The contents of context will now be available on Decrypt to use in making assertions. Next you will update retrieve to use the encryption context on decrypt.","title":"What Happened?"},{"location":"encryption-context/#step-2-use-encryption-context-on-decrypt","text":"Java JavaScript Node.JS Typescript Node.JS Python 1 2 3 4 5 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java and find retrieve(...) // ENCRYPTION-CONTEXT-START: Use Encryption Context on Decrypt Map < String , String > actualContext = decryptedMessage . getEncryptionContext (); PointerItem pointer = PointerItem . fromKeyAndContext ( key , actualContext ); // Save your changes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Edit ./retrieve.js return ( s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )) // ENCRYPTION-CONTEXT-START: Making Assertions . once ( \"MessageHeader\" , function ( header ) { }) ); // Save your changes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Edit ./src/retrieve.ts return ( s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )) // ENCRYPTION-CONTEXT-START: Making Assertions . once ( \"MessageHeader\" , function ( this : Writable , header : MessageHeader ) { }) ); // Save your changes 1 2 3 4 5 6 7 8 9 10 # Edit src/document_bucket/api.py # Find the retrieve(...) function, and use the Encryption SDK header's encryption # context to construct the DocumentBundle to return # ENCRYPTION-CONTEXT-START: Use encryption context on Decrypt return DocumentBundle . from_data_and_context ( plaintext , header . encryption_context ) # Save your changes","title":"Step 2: Use Encryption Context on Decrypt"},{"location":"encryption-context/#what-happened_1","text":"Now on decrypt, the validated encryption context from the Encryption SDK Message Format header will be passed back to the application. Any business logic that would benefit from using the encryption context data for making decisions can use the version bound and validated by the Encryption SDK and KMS. Next you will add a mechanism for the application to test assertions made in encryption context before working with the returned data.","title":"What Happened?"},{"location":"encryption-context/#step-3-making-assertions","text":"Java JavaScript Node.JS Typescript Node.JS Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // Edit ./src/main/java/sfw/example/esdkworkshop/Api.java and find retrieve(...) // ENCRYPTION-CONTEXT-START: Making Assertions boolean allExpectedContextKeysFound = actualContext . keySet (). containsAll ( expectedContextKeys ); if ( ! allExpectedContextKeysFound ) { // Remove all of the keys that were found expectedContextKeys . removeAll ( actualContext . keySet ()); String error = String . format ( \"Expected context keys were not found in the actual encryption context! \" + \"Missing keys were: %s\" , expectedContextKeys . toString ()); throw new DocumentBucketException ( error , new NoSuchElementException ()); } boolean allExpectedContextFound = actualContext . entrySet (). containsAll ( expectedContext . entrySet ()); if ( ! allExpectedContextFound ) { Set < Map . Entry < String , String >> expectedContextEntries = expectedContext . entrySet (); expectedContextEntries . removeAll ( actualContext . entrySet ()); String error = String . format ( \"Expected context pairs were not found in the actual encryption context! \" + \"Missing pairs were: %s\" , expectedContextEntries . toString ()); throw new DocumentBucketException ( error , new NoSuchElementException ()); } // Save your work 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // Edit ./retrieve.js return ( s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )) // ENCRYPTION-CONTEXT-START: Making Assertions . once ( \"MessageHeader\" , function ( header ) { const { encryptionContext } = header ; const pairs = Object . entries ( expectedContext || {}); const keys = ( expectedContextKeys || []). slice (); if ( ! ( pairs . every (([ key , value ]) => encryptionContext [ key ] === value ) && keys . every ( key => Object . hasOwnProperty . call ( encryptionContext , key ) ) ) ) { this . emit ( \"error\" , new Error ( \"Encryption context does not match expected shape\" ) ); } }) ); // Save your changes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // Edit ./src/retrieve.ts import { EC } from \"./store\" ; import { Writable } from \"stream\" ; const Bucket = config . state . bucketName (); ... return ( s3 . getObject ({ Bucket , Key }) . createReadStream () . pipe ( decryptStream ( decryptKeyring )) // ENCRYPTION-CONTEXT-START: Making Assertions . once ( \"MessageHeader\" , function ( this : Writable , header : MessageHeader ) { const { encryptionContext } = header ; const pairs = Object . entries ( expectedContext || {}); const keys = ( expectedContextKeys || []). slice (); if ( ! ( pairs . every (([ key , value ]) => encryptionContext [ key ] === value ) && keys . every ( key => Object . hasOwnProperty . call ( encryptionContext , key ) ) ) ) { this . emit ( \"error\" , new Error ( \"Encryption context does not match expected shape\" ) ); } }) ); // Save your changes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Edit src/document_bucket/api.py # Find the retrieve(...) function, and add some assertions about the contents # of the encryption context validated by the Encryption SDK # ENCRYPTION-CONTEXT-START: Making Assertions if not expected_context_keys <= header . encryption_context . keys (): error_msg = ( \"Encryption context assertion failed! \" f \"Expected all these keys: { expected_context_keys } , \" f \"but got { header . encryption_context } !\" ) raise AssertionError ( error_msg ) if not expected_context . items () <= header . encryption_context . items (): error_msg = ( \"Encryption context assertion failed! \" f \"Expected { expected_context } , \" f \"but got { header . encryption_context } !\" ) raise AssertionError ( error_msg ) # ENCRYPTION-CONTEXT-START: Use Encryption Context on Decrypt return DocumentBundle . from_data_and_context ( plaintext , header . encryption_context )","title":"Step 3: Making Assertions"},{"location":"encryption-context/#what-happened_2","text":"retrieve will use its \"expected context keys\" argument to validate that all of those keys (with any associated values) are present in the encryption context. retrieve will also use its \"expected context\" argument to validate that the exact key-value pairs specified in expected context are present in the actual encryption context. If either of those assumptions is invalid, retrieve will raise an exception before returning the data. These assertions safeguard against accidentally returning unintended, corrupted, or tampered data to the application. Now the Document Bucket will use AWS KMS and the AWS Encryption SDK to ensure that the context metadata is consistent throughout the lifetime of the objects, resistant to tampering or corruption, and make the validated context available to the application logic to make additional business logic assertions safely.","title":"What Happened?"},{"location":"encryption-context/#checking-your-work","text":"If you want to check your progress, or compare what you've done versus a finished example, check out the code in one of the -complete folders to compare. There is a -complete folder for each language. Java JavaScript Node.JS Typescript Node.JS Python 1 cd ~/environment/workshop/exercises/java/encryption-context-complete 1 cd ~/environment/workshop/exercises/node-javascript/encryption-context-complete 1 cd ~/environment/workshop/exercises/node-typescript/encryption-context-complete 1 cd ~/environment/workshop/exercises/python/encryption-context-complete","title":"Checking Your Work"},{"location":"encryption-context/#try-it-out","text":"Now that you pass encryption context all the way through to KMS and validate it on return, what assertions do you want to make about your data? Here's some ideas for things to test: Expecting exact match of key-value pairs for keys like stage , shard , and source-fleet Expecting a set of keys to be present like submit-date and category Expecting an exact match of a subset of the supplied key-value pairs (e.g. only stage and shard , not source-fleet ) Doing the same for expected keys with any value Adding a constraint of a new key that you didn't supply at encryption time Adding a constraint with a different value, like stage=production Changing capitalization Using sorted versus unsorted mappings, such as java.util.SortedMap<K, V> in Java or collections.OrderedDict in Python There's a few simple suggestions to get you started in the snippets below. Java JavaScript Node.JS JavaScript Node.JS CLI Typescript Node.JS Typescript Node.JS CLI Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Compile your code mvn compile // To use the API programmatically, use this target to launch jshell mvn jshell:run /open startup.jsh import java.util.HashMap ; Api documentBucket = App.initializeDocumentBucket () ; HashMap<String, String> context = new HashMap<String, String> () ; context.put ( \"shard\" , \"test\" ) ; context.put ( \"app\" , \"document-bucket\" ) ; context.put ( \"origin\" , \"development\" ) ; documentBucket.list () ; PointerItem item = documentBucket.store ( \"Store me in the Document Bucket!\" .getBytes () , context ) ; DocumentBundle document = documentBucket.retrieve ( item.partitionKey () .getS () , context ) ; System.out.println ( document.getPointer () .partitionKey () .getS () + \" : \" + new String ( document.getData () , java.nio.charset.StandardCharsets.UTF_8 )) ; // Ctrl+D to exit jshell // Or, to run logic that you write in App.java, use this target after compile mvn exec:java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 node list = require ( \"./list.js\" ) store = require ( \"./store.js\" ) retrieve = require ( \"./retrieve\" ) list (). then ( console . log ) encryptionContext = { stage : \"demo\" , purpose : \"simple demonstration\" , origin : \"us-east-2\" } store ( fs . createReadStream ( \"./store.js\" ), encryptionContext ). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) retrieve ( key , { expectedContext : { stage : \"demo\" }, expectedContextKeys : [ \"purpose\" ] }). pipe ( process . stdout ) // Ctrl-D when finished to exit the REPL 1 2 3 4 5 6 7 8 9 10 11 ./cli.js list ./cli.js store ./store.js \\ -c \"stage:demo\" \\ -c \"purpose:simple demonstration\" \\ -c \"origin:us-east-2\" # Note the \"Key\" value ./cli.js list # Note the \"reference\" value ./cli.js retrieve $KeyOrReferenceValue \\ -c \"stage:demo\" \\ -k purpose 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 node - r ts - node / register ;({ list } = require ( \"./src/list.ts\" )) ;({ store } = require ( \"./src/store.ts\" )) ;({ retrieve } = require ( \"./src/retrieve.ts\" )) list (). then ( console . log ) encryptionContext = { stage : \"demo\" , purpose : \"simple demonstration\" , origin : \"us-east-2\" } store ( fs . createReadStream ( \"./src/store.ts\" ), encryptionContext ). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) retrieve ( key , { expectedContext : { stage : \"demo\" }, expectedContextKeys : [ \"purpose\" ] }). pipe ( process . stdout ) // Ctrl-D when finished to exit the REPL 1 2 3 4 5 6 7 8 9 10 11 ./cli.ts list ./cli.ts store ./src/store.ts \\ -c \"stage:demo\" \\ -c \"purpose:simple demonstration\" \\ -c \"origin:us-east-2\" # Note the \"Key\" value ./cli.ts list # Note the \"reference\" value ./cli.ts retrieve $KeyOrReferenceValue \\ -c \"stage:demo\" \\ -k purpose 1 2 3 4 5 6 7 8 tox - e repl import document_bucket ops = document_bucket . initialize () context = { \"host\" : \"cloud9\" , \"shard\" : \"development\" , \"purpose\" : \"experimental\" } ops . list () item = ops . store ( b 'some data' , context ) print ( ops . retrieve ( item . partition_key , expected_context = context )) # Ctrl-D when finished to exit the REPL","title":"Try it Out"},{"location":"encryption-context/#explore-further","text":"Encryption context can provide different types of features and guardrails in your application logic. Consider these ideas for further exploration: Detecting Drift - context contents are stored on the DynamoDB item. S3 has object metadata that could also use the context pairs. How would you use the validated encryption context to validate and guardrail those two data sources? What could that feature add to your application? Meta-operations on Encryption Context - the encryption context is stored on the open-specification AWS Encryption SDK Message Format . Would it help your system to write tools to process the metadata -- such as the encryption context -- on the message format? DynamoDB Keys and Indexes - the Document Bucket adds composite indexes by context key. What about adding composite keys by key-value pairs? If you know a particular key should always be present in well-formed encrypted data, perhaps that should also be a Secondary Index ? Enforing EC Keys - If you know that there is a key that should always be present, and that you want to index on in DynamoDB, do you want to enforce that it's always present? You can extend the Cryptographic Materials Manager component in the AWS Encryption SDK to enforce this during cryptographic operations. Alarms and Monitoring - How can you leverage encryption context and CloudWatch Alarms for CloudTrail to monitor and protect your application?","title":"Explore Further"},{"location":"encryption-context/#next-exercise","text":"Congratulations! You have officially completed the Busy Engineer's Document Bucket workshop. Proceed to Clean Up and Closing to tear down your workshop environment.","title":"Next exercise"},{"location":"getting-started/","text":"Getting Started Workshop Details In this workshop, you will add encryption and decryption features to the Busy Engineer's Document Bucket to learn about some real world AWS patterns for integrating client-side encryption using AWS Key Management Service (AWS KMS) and the AWS Encryption software development kit (ESDK) in application code. You will learn how to leverage features like multiple AWS KMS Key support and Encryption Context to secure your application. To begin, the Document Bucket supports storing objects (documents or files or other blobs of data) in a private Amazon S3 bucket, and indexing them in Amazon DynamoDB. This allows Document Bucket users to share objects with other users, and store them for retrieval later. The DynamoDB entries provide metadata context for each Document Bucket object, as well as fast lookups to the provided context. This context allows users to store additional information about the S3 object like the origin user, the destination fleet, the project, or any other tag that would be useful to know without having to download and examine the object. DynamoDB is configured to allow you to index on the keys associated with the S3 objects. So, for example, it's a quick query to find out which objects have been tagged with metadata context that includes \"configuration\". The Document Bucket supports the following APIs: list : This operation queries DynamoDB for all entries for all objects in the Document Bucket, and their metadata. It returns the set of items that have been stored. store : This operation accepts a blob of bytes and a map of metadata context. It generates a unique identifier (UID) for the object. The UID and associated metadata are written to DynamoDB. The bytes of the object are written to S3 under a key of that UID. Any context metadata keys in DynamoDB are updated to include that new UID. retrieve : This operation accepts a unique identifier (UID) as an argument. It looks up the UID in DynamoDB to identify the associated context and then retrieves the referenced object from S3. It returns the Document Bundle (UID, context, and referenced object) to the caller. search : This operation accepts a metadata key as search input. It queries DynamoDB for the set of objects in the Document Bucket with context matching that key. It returns the set of UIDs and their associated metadata. Once you have identified the desired object(s), you can pass the UIDs to retrieve to fetch the objects. This is a start for sharing, storing, and searching various objects. But what about sensitive documents? Or protecting, say, important configuration files from accidental corruption during storing or retrieving? The workshop exercises will help you address some of these challenges. Background In this section, we will give you step-by-step instructions to prepare your AWS Environment to work with the Busy Engineer's Document Bucket. To set up your environment, you will: Deploy a CloudFormation stack to launch an AWS Cloud9 integrated development environment (IDE) AWS Cloud9 lets you write, run, and debug your code with just a browser Launch the Cloud9 IDE that you will use for the rest of the workshop Launch resource stacks using the AWS Cloud Development Kit (CDK), including: The BusyEngineersDocumentBucket stack, with your DynamoDB table and S3 bucket One KMS Key in one region, called Faythe, that you will use in encryption and decryption operations One KMS Key in another region, called Walter, that you will use in encryption and decryption operations Bootstrap the development environment in Cloud9 Let's Go! Important Note About Accounts If you are using your own AWS Account for this workshop, make sure: It is not a production account. This is a workshop for learning and experimentation. Don't put production at risk! When you are done with the exercises, you follow the instructions in Clean Up and Closing to clean up the deployed resources. If you are working through these exercises in an AWS classroom environment, AWS accounts have been created for you. Procedure Sign in to your AWS Account for the workshop Click this link to load the CloudFormation template for your Cloud9 IDE Click Create Stack to launch the stack Do not change your region settings from the default and do not switch regions in the console It will take about three minutes to launch your Cloud9 IDE Click this link to Open the Cloud9 Console and find your Cloud9 IDE You may need to wait a minute and refresh while CloudFormation spins up the resources There will be a blue tile with your workshop IDE when it's ready At the bottom of the tile, click Open IDE to launch Cloud9 Type cd ~/environment/workshop and hit Enter Type make bootstrap and hit Enter to set up your workshop environment Wait until you see *** BOOTSTRAP COMPLETE *** make bootstrap will take approximately 5 minutes. If you are in a live workshop, you can run this step during the presentation. If you are working on your own, grab a cup of your favorite beverage while you wait. At this point you have deployed your workshop stacks using CDK and set up language environments for all of the workshop languages In Cloud9, close your Terminal window and open a new one ( Window -> New Terminal ) to pick up the changes make bootstrap installed Choose your workshop language, and cd to its folder under exercises Java Typescript Node.JS JavaScript Node.JS Python 1 cd ~/environment/workshop/exercises/java 1 cd ~/environment/workshop/exercises/node-typescript 1 cd ~/environment/workshop/exercises/node-javascript 1 cd ~/environment/workshop/exercises/python Your environment is ready! Start the workshop! Now that you have your environment and language selected, you can start Adding the Encryption SDK .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#workshop-details","text":"In this workshop, you will add encryption and decryption features to the Busy Engineer's Document Bucket to learn about some real world AWS patterns for integrating client-side encryption using AWS Key Management Service (AWS KMS) and the AWS Encryption software development kit (ESDK) in application code. You will learn how to leverage features like multiple AWS KMS Key support and Encryption Context to secure your application. To begin, the Document Bucket supports storing objects (documents or files or other blobs of data) in a private Amazon S3 bucket, and indexing them in Amazon DynamoDB. This allows Document Bucket users to share objects with other users, and store them for retrieval later. The DynamoDB entries provide metadata context for each Document Bucket object, as well as fast lookups to the provided context. This context allows users to store additional information about the S3 object like the origin user, the destination fleet, the project, or any other tag that would be useful to know without having to download and examine the object. DynamoDB is configured to allow you to index on the keys associated with the S3 objects. So, for example, it's a quick query to find out which objects have been tagged with metadata context that includes \"configuration\". The Document Bucket supports the following APIs: list : This operation queries DynamoDB for all entries for all objects in the Document Bucket, and their metadata. It returns the set of items that have been stored. store : This operation accepts a blob of bytes and a map of metadata context. It generates a unique identifier (UID) for the object. The UID and associated metadata are written to DynamoDB. The bytes of the object are written to S3 under a key of that UID. Any context metadata keys in DynamoDB are updated to include that new UID. retrieve : This operation accepts a unique identifier (UID) as an argument. It looks up the UID in DynamoDB to identify the associated context and then retrieves the referenced object from S3. It returns the Document Bundle (UID, context, and referenced object) to the caller. search : This operation accepts a metadata key as search input. It queries DynamoDB for the set of objects in the Document Bucket with context matching that key. It returns the set of UIDs and their associated metadata. Once you have identified the desired object(s), you can pass the UIDs to retrieve to fetch the objects. This is a start for sharing, storing, and searching various objects. But what about sensitive documents? Or protecting, say, important configuration files from accidental corruption during storing or retrieving? The workshop exercises will help you address some of these challenges.","title":"Workshop Details"},{"location":"getting-started/#background","text":"In this section, we will give you step-by-step instructions to prepare your AWS Environment to work with the Busy Engineer's Document Bucket. To set up your environment, you will: Deploy a CloudFormation stack to launch an AWS Cloud9 integrated development environment (IDE) AWS Cloud9 lets you write, run, and debug your code with just a browser Launch the Cloud9 IDE that you will use for the rest of the workshop Launch resource stacks using the AWS Cloud Development Kit (CDK), including: The BusyEngineersDocumentBucket stack, with your DynamoDB table and S3 bucket One KMS Key in one region, called Faythe, that you will use in encryption and decryption operations One KMS Key in another region, called Walter, that you will use in encryption and decryption operations Bootstrap the development environment in Cloud9","title":"Background"},{"location":"getting-started/#lets-go","text":"","title":"Let's Go!"},{"location":"getting-started/#important-note-about-accounts","text":"If you are using your own AWS Account for this workshop, make sure: It is not a production account. This is a workshop for learning and experimentation. Don't put production at risk! When you are done with the exercises, you follow the instructions in Clean Up and Closing to clean up the deployed resources. If you are working through these exercises in an AWS classroom environment, AWS accounts have been created for you.","title":"Important Note About Accounts"},{"location":"getting-started/#procedure","text":"Sign in to your AWS Account for the workshop Click this link to load the CloudFormation template for your Cloud9 IDE Click Create Stack to launch the stack Do not change your region settings from the default and do not switch regions in the console It will take about three minutes to launch your Cloud9 IDE Click this link to Open the Cloud9 Console and find your Cloud9 IDE You may need to wait a minute and refresh while CloudFormation spins up the resources There will be a blue tile with your workshop IDE when it's ready At the bottom of the tile, click Open IDE to launch Cloud9 Type cd ~/environment/workshop and hit Enter Type make bootstrap and hit Enter to set up your workshop environment Wait until you see *** BOOTSTRAP COMPLETE *** make bootstrap will take approximately 5 minutes. If you are in a live workshop, you can run this step during the presentation. If you are working on your own, grab a cup of your favorite beverage while you wait. At this point you have deployed your workshop stacks using CDK and set up language environments for all of the workshop languages In Cloud9, close your Terminal window and open a new one ( Window -> New Terminal ) to pick up the changes make bootstrap installed Choose your workshop language, and cd to its folder under exercises Java Typescript Node.JS JavaScript Node.JS Python 1 cd ~/environment/workshop/exercises/java 1 cd ~/environment/workshop/exercises/node-typescript 1 cd ~/environment/workshop/exercises/node-javascript 1 cd ~/environment/workshop/exercises/python Your environment is ready!","title":"Procedure"},{"location":"getting-started/#start-the-workshop","text":"Now that you have your environment and language selected, you can start Adding the Encryption SDK .","title":"Start the workshop!"},{"location":"multi-kms-key/","text":"Exercise 2: Adding Multi-KMS-Key Support to the Document Bucket In this section, you will configure the AWS Encryption SDK to use multiple KMS Keys that reside in different regions. Background Now your Document Bucket will encrypt files when you store them, and will decrypt the files for you when you retrieve them. You're using one of your KMS Keys, Faythe. But what if you want to use multiple KMS Keys? You might want to use a partner team's KMS Key, so that they can access documents relevant to them. Perhaps you want the Document Bucket to have two independent regions to access the contents, for high availability, or to put the contents closer to the recipients. Configuring multiple KMS Keys this way does not require re-encryption of the document data. That's because the data is still encrypted with a single data key, used exclusively for that document. Configuring multiple KMS Keys causes the AWS Encryption SDK to encrypt that data key again using the additional KMS Keys, and store that additional version of the data key on the encrypted message format. As long as there is one available KMS Key to decrypt any encrypted version of the data key, the document will be accessible. (There are ways to configure the Encryption SDK to be more restrictive about which KMS Keys it will try -- but for now you'll start with the simple case.) There's many reasons why using more than one KMS Key can be useful. And in this exercise, you're going to see how to set that up with KMS and the Encryption SDK. You already have another KMS Key waiting to be used. When you deployed the Faythe KMS Key, you also deployed a second KMS Key, nicknamed Walter. In this exercise, we're going to configure Walter, and then use some scripts in the repository to add and remove permission to use each of Faythe and Walter. Doing so will change how your document is encrypted -- if you remove permission to both Faythe and Walter, you won't be able to encrypt or decrypt anymore! -- and let you observe how the system behavior changes when keys are accessible or inaccessible. Each attempt to use a KMS Key is checked against that KMS Key's permissions. An audit trail entry is also written to CloudTrail. Decryption attempts will continue for each version of the encrypted data key until the Encryption SDK either succeds at decrypting an encrypted data key with its associated KMS Key, or runs out of encrypted data keys to try. For encryption, the Encryption SDK will attempt to use every KMS Key it is configured to attempt to produce another encryption of that data key. You'll get to see all of this in action in just a minute, after a couple small code changes. Let's Go! Starting Directory If you just finished Adding the Encryption SDK , you are all set. If you aren't sure, or want to catch up, jump into the multi-kms-key-start directory for the language of your choice. Java Typescript Node.JS JavaScript Node.JS Python 1 cd ~/environment/workshop/exercises/java/multi-kms-key-start 1 cd ~/environment/workshop/exercises/node-typescript/multi-kms-key-start 1 cd ~/environment/workshop/exercises/node-javascript/multi-kms-key-start 1 cd ~/environment/workshop/exercises/python/multi-kms-key-start Step 1: Configure Walter Java JavaScript Node.JS Typescript Node.JS Python 1 2 3 4 // Edit ./src/main/java/sfw/example/esdkworkshop/App.java String faytheKmsKey = stateConfig . contents . state . faytheKmsKey ; // MULTI-KMS-KEY-START: Configure Walter String walterKmsKey = stateConfig . contents . state . WalterKmsKey ; 1 2 3 4 5 6 7 // Edit ./store.js // MULTI-KMS-KEY-START: Configure Walter const walterKmsKey = config . state . getWalterKmsKey (); // Edit ./retrieve.js // MULTI-KMS-KEY-START: Configure Walter const walterKmsKey = config . state . getWalterKmsKey (); 1 2 3 4 5 6 7 // Edit ./src/store.ts // MULTI-KMS-KEY-START: Configure Walter const walterKmsKey = config . state . getWalterKmsKey (); // Edit ./src/retrieve.ts // MULTI-KMS-KEY-START: Configure Walter const walterKmsKey = config . state . getWalterKmsKey (); 1 2 3 4 # Edit src/document_bucket/__init__.py # MULTI-KMS-KEY-START: Configure Walter walter_kms_key = state [ \"WalterKmsKey\" ] What Happened? When you launched your workshop stacks in Getting Started , along with the Faythe KMS Key, you also launched a KMS Key called Walter. Walter's ARN was also plumbed through to the configuration state file that is set up for you by the workshop. Now that ARN is being pulled into a variable to use in the Encryption SDK configuration. Step 2: Add Walter to the KMS Keys to Use Java JavaScript Node.JS Typescript Node.JS Python 1 2 3 // Edit ./src/main/java/sfw/example/esdkworkshop/App.java // MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use KmsMasterKeyProvider mkp = KmsMasterKeyProvider . builder (). buildStrict ( faytheKmsKey , walterKmsKey ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Edit ./store.js // MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use ... const encryptKeyring = new KmsKeyringNode ({ generatorKeyId : faytheKmsKey , keyIds : [ walterKmsKey ] }); // Save and exit // Edit ./retrieve.js // MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use ... const decryptKeyring = new KmsKeyringNode ({ keyIds : [ faytheKmsKey , walterKmsKey ] }); // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Edit ./src/store.ts // MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use ... const encryptKeyring = new KmsKeyringNode ({ generatorKeyId : faytheKmsKey , keyIds : [ walterKmsKey ] }); // Save and exit // Edit ./src/retrieve.ts // MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use ... const decryptKeyring = new KmsKeyringNode ({ keyIds : [ faytheKmsKey , walterKmsKey ] }); // Save and exit 1 2 3 4 5 6 # Edit src/document_bucket/__init__.py # MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use kms_key = [ faythe_kms_key , walter_kms_key ] # Save and exit What Happened? In the previous exercise, you configured the Encryption SDK to use a list of KMS Keys that contained only Faythe. Configuring the Encryption SDK to also use Walter for encrypt, and to also try Walter for decrypt, required adding the ARN for Walter to the configuration list. Checking Your Work If you want to check your progress, or compare what you've done versus a finished example, check out the code in one of the -complete folders to compare. There is a -complete folder for each language. Java Typescript Node.JS JavaScript Node.JS Python 1 cd ~/environment/workshop/exercises/java/multi-kms-key-complete 1 cd ~/environment/workshop/exercises/node-typescript/multi-kms-key-complete 1 cd ~/environment/workshop/exercises/node-javascript/multi-kms-key-complete 1 cd ~/environment/workshop/exercises/python/multi-kms-key-complete Try it Out Adding the Walter KMS Key to the list of KMS Keys that the application will (attempt) to use was a couple of lines of code, but has powerful implications. To help you explore the behavior of the system, there are some additional make targets to change the permissions configuration of Faythe and Walter. Using these targets, you can add and remove permission for the application to use Faythe and Walter to generate data keys, encrypt, and decrypt, and observe how the application behavior changes -- as well as what is logged to CloudTrail. In ~/environment/workshop/exercises , you'll find a Makefile with several targets for you to experiment with: make list_grants will show you the current state of grants on your KMS Keys make revoke_walter_grant will remove the Grant providing permissions to use Walter in the application make revoke_faythe_grant will remove the Grant providing permissions to use Faythe in the application make revoke_grants will remove the Grants for both KMS Keys make create_grants will add Grants to use either or both KMS Key, as needed The application behavior will change. Important when you revoke permissions to the first KMS Key in the list for a keyring (which is Faythe by default), you will need to change the keyring configuration to use Walter as your generator to resume operations. See documentation of Generator KMS Keys for more. You can also observe the impact of changing Granted permissions by monitoring CloudTrail. Note that log entries take a few minutes to propagate to CloudTrail, and that Faythe and Walter are in different regions, so you will need to look at CloudTrail in the region for each one. Faythe is in us-east-2 , so check CloudTrail in that region with these links: GenerateDataKey operations in CloudTrail in us-east-2 Decrypt operations in CloudTrail in us-east-2 Encrypt operations in CloudTrail in us-east-2 Note: To observe Encrypt calls using Faythe, explore some of the configuration and permissions changes suggested below. Walter is in us-west-2 , so check CloudTrail in that region with these links: GenerateDataKey operations in CloudTrail in us-west-2 Encrypt operations in CloudTrail in us-west-2 Decrypt operations in CloudTrail in us-west-2 Try out combinations of Grant permissions for your application and watch how the behavior changes: Revoke permission to use Faythe, and watch calls move to Walter in CloudTrail and in your application With permission to use Faythe revoked, try retrieving an older document protected by Faythe Revoke permissions to both Faythe and Walter -- now operations fail Encrypt some data with both Faythe and Walter active, and revoke permission to either one -- notice that application operations continue to work Change the configuration order of Faythe and Walter, and watch how call patterns change to use the two KMS Keys Revoke permission to Walter, and encrypt some data with Faythe. Then, add permission back to Walter, revoke permission to use Faythe, and try to decrypt that data What other interesting access patterns can you imagine? Java JavaScript Node.JS JavaScript Node.JS CLI Typescript Node.JS Typescript Node.JS CLI Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Compile your code mvn compile // To use the API programmatically, use this target to launch jshell mvn jshell : run / open startup . jsh Api documentBucket = App . initializeDocumentBucket (); documentBucket . list (); PointerItem item = documentBucket . store ( \"Store me in the Document Bucket!\" . getBytes ()); DocumentBundle document = documentBucket . retrieve ( item . partitionKey (). getS ()); System . out . println ( document . getPointer (). partitionKey (). getS () + \" : \" + new String ( document . getData (), java . nio . charset . StandardCharsets . UTF_8 )); // Ctrl+D to exit jshell // Use the make targets to change the Grants and see what happens! // To run logic that you write in App.java, use this target after compile mvn exec : java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 node list = require ( \"./list.js\" ) store = require ( \"./store.js\" ) retrieve = require ( \"./retrieve\" ) list (). then ( console . log ) store ( fs . createReadStream ( \"./store.js\" )). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) retrieve ( key ). pipe ( process . stdout ) // Use the make targets to change the Grants and see what happens! // Ctrl-D when finished to exit the REPL 1 2 3 4 5 6 7 ./cli.js list ./cli.js store ./store.js # Note the \"Key\" value ./cli.js list # Note the \"reference\" value ./cli.js retrieve $KeyOrReferenceValue # Use the make targets to change the grants and see what happens! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 node - r ts - node / register ;({ list } = require ( \"./src/list.ts\" )) ;({ store } = require ( \"./src/store.ts\" )) ;({ retrieve } = require ( \"./src/retrieve.ts\" )) list (). then ( console . log ) store ( fs . createReadStream ( \"./src/store.ts\" )). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) retrieve ( key ). pipe ( process . stdout ) // Ctrl-D when finished to exit the REPL // Use the make targets to change the Grants and see what happens! 1 2 3 4 5 6 7 ./cli.ts list ./cli.ts store ./src/store.ts # Note the \"Key\" value ./cli.ts list # Note the \"reference\" value ./cli.ts retrieve $KeyOrReferenceValue # Use the make targets to change the grants and see what happens! 1 2 3 4 5 6 7 8 tox - e repl import document_bucket ops = document_bucket . initialize () ops . list () item = ops . store ( b 'some data' ) print ( ops . retrieve ( item . partition_key )) # Use the make targets to change the grants and see what happens! # Ctrl-D when finished to exit the REPL Explore Further Want to dive into more content related to this exercise? Try out these links. AWS KMS: Key Grants AWS KMS: Key Policies AWS KMS: Cross-account KMS Key Usage Blog Post: How to decrypt ciphertexts in multiple regions with the AWS Encryption SDK in C Next exercise Ready for more? Next you will work with Encryption Context .","title":"Exercise 2"},{"location":"multi-kms-key/#exercise-2-adding-multi-kms-key-support-to-the-document-bucket","text":"In this section, you will configure the AWS Encryption SDK to use multiple KMS Keys that reside in different regions.","title":"Exercise 2: Adding Multi-KMS-Key Support to the Document Bucket"},{"location":"multi-kms-key/#background","text":"Now your Document Bucket will encrypt files when you store them, and will decrypt the files for you when you retrieve them. You're using one of your KMS Keys, Faythe. But what if you want to use multiple KMS Keys? You might want to use a partner team's KMS Key, so that they can access documents relevant to them. Perhaps you want the Document Bucket to have two independent regions to access the contents, for high availability, or to put the contents closer to the recipients. Configuring multiple KMS Keys this way does not require re-encryption of the document data. That's because the data is still encrypted with a single data key, used exclusively for that document. Configuring multiple KMS Keys causes the AWS Encryption SDK to encrypt that data key again using the additional KMS Keys, and store that additional version of the data key on the encrypted message format. As long as there is one available KMS Key to decrypt any encrypted version of the data key, the document will be accessible. (There are ways to configure the Encryption SDK to be more restrictive about which KMS Keys it will try -- but for now you'll start with the simple case.) There's many reasons why using more than one KMS Key can be useful. And in this exercise, you're going to see how to set that up with KMS and the Encryption SDK. You already have another KMS Key waiting to be used. When you deployed the Faythe KMS Key, you also deployed a second KMS Key, nicknamed Walter. In this exercise, we're going to configure Walter, and then use some scripts in the repository to add and remove permission to use each of Faythe and Walter. Doing so will change how your document is encrypted -- if you remove permission to both Faythe and Walter, you won't be able to encrypt or decrypt anymore! -- and let you observe how the system behavior changes when keys are accessible or inaccessible. Each attempt to use a KMS Key is checked against that KMS Key's permissions. An audit trail entry is also written to CloudTrail. Decryption attempts will continue for each version of the encrypted data key until the Encryption SDK either succeds at decrypting an encrypted data key with its associated KMS Key, or runs out of encrypted data keys to try. For encryption, the Encryption SDK will attempt to use every KMS Key it is configured to attempt to produce another encryption of that data key. You'll get to see all of this in action in just a minute, after a couple small code changes.","title":"Background"},{"location":"multi-kms-key/#lets-go","text":"","title":"Let's Go!"},{"location":"multi-kms-key/#starting-directory","text":"If you just finished Adding the Encryption SDK , you are all set. If you aren't sure, or want to catch up, jump into the multi-kms-key-start directory for the language of your choice. Java Typescript Node.JS JavaScript Node.JS Python 1 cd ~/environment/workshop/exercises/java/multi-kms-key-start 1 cd ~/environment/workshop/exercises/node-typescript/multi-kms-key-start 1 cd ~/environment/workshop/exercises/node-javascript/multi-kms-key-start 1 cd ~/environment/workshop/exercises/python/multi-kms-key-start","title":"Starting Directory"},{"location":"multi-kms-key/#step-1-configure-walter","text":"Java JavaScript Node.JS Typescript Node.JS Python 1 2 3 4 // Edit ./src/main/java/sfw/example/esdkworkshop/App.java String faytheKmsKey = stateConfig . contents . state . faytheKmsKey ; // MULTI-KMS-KEY-START: Configure Walter String walterKmsKey = stateConfig . contents . state . WalterKmsKey ; 1 2 3 4 5 6 7 // Edit ./store.js // MULTI-KMS-KEY-START: Configure Walter const walterKmsKey = config . state . getWalterKmsKey (); // Edit ./retrieve.js // MULTI-KMS-KEY-START: Configure Walter const walterKmsKey = config . state . getWalterKmsKey (); 1 2 3 4 5 6 7 // Edit ./src/store.ts // MULTI-KMS-KEY-START: Configure Walter const walterKmsKey = config . state . getWalterKmsKey (); // Edit ./src/retrieve.ts // MULTI-KMS-KEY-START: Configure Walter const walterKmsKey = config . state . getWalterKmsKey (); 1 2 3 4 # Edit src/document_bucket/__init__.py # MULTI-KMS-KEY-START: Configure Walter walter_kms_key = state [ \"WalterKmsKey\" ]","title":"Step 1: Configure Walter"},{"location":"multi-kms-key/#what-happened","text":"When you launched your workshop stacks in Getting Started , along with the Faythe KMS Key, you also launched a KMS Key called Walter. Walter's ARN was also plumbed through to the configuration state file that is set up for you by the workshop. Now that ARN is being pulled into a variable to use in the Encryption SDK configuration.","title":"What Happened?"},{"location":"multi-kms-key/#step-2-add-walter-to-the-kms-keys-to-use","text":"Java JavaScript Node.JS Typescript Node.JS Python 1 2 3 // Edit ./src/main/java/sfw/example/esdkworkshop/App.java // MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use KmsMasterKeyProvider mkp = KmsMasterKeyProvider . builder (). buildStrict ( faytheKmsKey , walterKmsKey ); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Edit ./store.js // MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use ... const encryptKeyring = new KmsKeyringNode ({ generatorKeyId : faytheKmsKey , keyIds : [ walterKmsKey ] }); // Save and exit // Edit ./retrieve.js // MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use ... const decryptKeyring = new KmsKeyringNode ({ keyIds : [ faytheKmsKey , walterKmsKey ] }); // Save and exit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Edit ./src/store.ts // MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use ... const encryptKeyring = new KmsKeyringNode ({ generatorKeyId : faytheKmsKey , keyIds : [ walterKmsKey ] }); // Save and exit // Edit ./src/retrieve.ts // MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use ... const decryptKeyring = new KmsKeyringNode ({ keyIds : [ faytheKmsKey , walterKmsKey ] }); // Save and exit 1 2 3 4 5 6 # Edit src/document_bucket/__init__.py # MULTI-KMS-KEY-START: Add Walter to the KMS Keys to Use kms_key = [ faythe_kms_key , walter_kms_key ] # Save and exit","title":"Step 2: Add Walter to the KMS Keys to Use"},{"location":"multi-kms-key/#what-happened_1","text":"In the previous exercise, you configured the Encryption SDK to use a list of KMS Keys that contained only Faythe. Configuring the Encryption SDK to also use Walter for encrypt, and to also try Walter for decrypt, required adding the ARN for Walter to the configuration list.","title":"What Happened?"},{"location":"multi-kms-key/#checking-your-work","text":"If you want to check your progress, or compare what you've done versus a finished example, check out the code in one of the -complete folders to compare. There is a -complete folder for each language. Java Typescript Node.JS JavaScript Node.JS Python 1 cd ~/environment/workshop/exercises/java/multi-kms-key-complete 1 cd ~/environment/workshop/exercises/node-typescript/multi-kms-key-complete 1 cd ~/environment/workshop/exercises/node-javascript/multi-kms-key-complete 1 cd ~/environment/workshop/exercises/python/multi-kms-key-complete","title":"Checking Your Work"},{"location":"multi-kms-key/#try-it-out","text":"Adding the Walter KMS Key to the list of KMS Keys that the application will (attempt) to use was a couple of lines of code, but has powerful implications. To help you explore the behavior of the system, there are some additional make targets to change the permissions configuration of Faythe and Walter. Using these targets, you can add and remove permission for the application to use Faythe and Walter to generate data keys, encrypt, and decrypt, and observe how the application behavior changes -- as well as what is logged to CloudTrail. In ~/environment/workshop/exercises , you'll find a Makefile with several targets for you to experiment with: make list_grants will show you the current state of grants on your KMS Keys make revoke_walter_grant will remove the Grant providing permissions to use Walter in the application make revoke_faythe_grant will remove the Grant providing permissions to use Faythe in the application make revoke_grants will remove the Grants for both KMS Keys make create_grants will add Grants to use either or both KMS Key, as needed The application behavior will change. Important when you revoke permissions to the first KMS Key in the list for a keyring (which is Faythe by default), you will need to change the keyring configuration to use Walter as your generator to resume operations. See documentation of Generator KMS Keys for more. You can also observe the impact of changing Granted permissions by monitoring CloudTrail. Note that log entries take a few minutes to propagate to CloudTrail, and that Faythe and Walter are in different regions, so you will need to look at CloudTrail in the region for each one. Faythe is in us-east-2 , so check CloudTrail in that region with these links: GenerateDataKey operations in CloudTrail in us-east-2 Decrypt operations in CloudTrail in us-east-2 Encrypt operations in CloudTrail in us-east-2 Note: To observe Encrypt calls using Faythe, explore some of the configuration and permissions changes suggested below. Walter is in us-west-2 , so check CloudTrail in that region with these links: GenerateDataKey operations in CloudTrail in us-west-2 Encrypt operations in CloudTrail in us-west-2 Decrypt operations in CloudTrail in us-west-2 Try out combinations of Grant permissions for your application and watch how the behavior changes: Revoke permission to use Faythe, and watch calls move to Walter in CloudTrail and in your application With permission to use Faythe revoked, try retrieving an older document protected by Faythe Revoke permissions to both Faythe and Walter -- now operations fail Encrypt some data with both Faythe and Walter active, and revoke permission to either one -- notice that application operations continue to work Change the configuration order of Faythe and Walter, and watch how call patterns change to use the two KMS Keys Revoke permission to Walter, and encrypt some data with Faythe. Then, add permission back to Walter, revoke permission to use Faythe, and try to decrypt that data What other interesting access patterns can you imagine? Java JavaScript Node.JS JavaScript Node.JS CLI Typescript Node.JS Typescript Node.JS CLI Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Compile your code mvn compile // To use the API programmatically, use this target to launch jshell mvn jshell : run / open startup . jsh Api documentBucket = App . initializeDocumentBucket (); documentBucket . list (); PointerItem item = documentBucket . store ( \"Store me in the Document Bucket!\" . getBytes ()); DocumentBundle document = documentBucket . retrieve ( item . partitionKey (). getS ()); System . out . println ( document . getPointer (). partitionKey (). getS () + \" : \" + new String ( document . getData (), java . nio . charset . StandardCharsets . UTF_8 )); // Ctrl+D to exit jshell // Use the make targets to change the Grants and see what happens! // To run logic that you write in App.java, use this target after compile mvn exec : java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 node list = require ( \"./list.js\" ) store = require ( \"./store.js\" ) retrieve = require ( \"./retrieve\" ) list (). then ( console . log ) store ( fs . createReadStream ( \"./store.js\" )). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) retrieve ( key ). pipe ( process . stdout ) // Use the make targets to change the Grants and see what happens! // Ctrl-D when finished to exit the REPL 1 2 3 4 5 6 7 ./cli.js list ./cli.js store ./store.js # Note the \"Key\" value ./cli.js list # Note the \"reference\" value ./cli.js retrieve $KeyOrReferenceValue # Use the make targets to change the grants and see what happens! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 node - r ts - node / register ;({ list } = require ( \"./src/list.ts\" )) ;({ store } = require ( \"./src/store.ts\" )) ;({ retrieve } = require ( \"./src/retrieve.ts\" )) list (). then ( console . log ) store ( fs . createReadStream ( \"./src/store.ts\" )). then ( r => { // Just storing the s3 key key = r . Key console . log ( r ) }) list (). then ( console . log ) retrieve ( key ). pipe ( process . stdout ) // Ctrl-D when finished to exit the REPL // Use the make targets to change the Grants and see what happens! 1 2 3 4 5 6 7 ./cli.ts list ./cli.ts store ./src/store.ts # Note the \"Key\" value ./cli.ts list # Note the \"reference\" value ./cli.ts retrieve $KeyOrReferenceValue # Use the make targets to change the grants and see what happens! 1 2 3 4 5 6 7 8 tox - e repl import document_bucket ops = document_bucket . initialize () ops . list () item = ops . store ( b 'some data' ) print ( ops . retrieve ( item . partition_key )) # Use the make targets to change the grants and see what happens! # Ctrl-D when finished to exit the REPL","title":"Try it Out"},{"location":"multi-kms-key/#explore-further","text":"Want to dive into more content related to this exercise? Try out these links. AWS KMS: Key Grants AWS KMS: Key Policies AWS KMS: Cross-account KMS Key Usage Blog Post: How to decrypt ciphertexts in multiple regions with the AWS Encryption SDK in C","title":"Explore Further"},{"location":"multi-kms-key/#next-exercise","text":"Ready for more? Next you will work with Encryption Context .","title":"Next exercise"},{"location":"tips-and-troubleshooting/","text":"Tips and Troubleshooting This page contains reference information that might be useful as you work through the workshop. Troubleshooting Errors with configuration If you are getting a NullPointerException (Java), or a KeyError (Python), or similar errors when interacting with the TOML files (config and state), try running the state generation step again to make sure the file is generated and well formed. 1 2 3 4 5 6 # Check the contents of your state file cat ~/.busy_engineers_state.toml # Regenerate your state file, if needed cd ~/environment/workshop/cdk/ make state Now try your work again. Automated code checks These commands will check your code for missing imports, syntax issues, and other minor issues that might trip you up. Java JavaScript Node.JS Typescript Node.JS Python 1 mvn verify 1 npm run prettier 1 npm run prettier 1 tox -e check Missing CloudFormation resources Make sure you take the defaults for which region to launch in (us-east-2). If you've changed the region for any part of the workshop, tear your stack down and start fresh. More disk space on Cloud9 Working through the workshop, you might find that you are out of disk. If this happens, use the following script to expand your EBS volume. ( Script source ) Note that this is adapted from the script source because the Busy Engineer's Cloud9 instances run on EC2 Nitro, which has different block device identifiers. Step by step: Save the script below to resize.sh chmod +x resize.sh ./resize.sh By default, this will increase your volume to 20GB, but you may supply a different number if you prefer. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/bin/bash # Specify the desired volume size in GiB as a command-line argument. If not specified, default to 20 GiB. SIZE = ${ 1 :- 20 } # Install the jq command-line JSON processor. sudo yum -y install jq # Get the ID of the envrionment host Amazon EC2 instance. INSTANCEID = $( curl http://169.254.169.254/latest/meta-data//instance-id ) # Get the ID of the Amazon EBS volume associated with the instance. VOLUMEID = $( aws ec2 describe-instances --instance-id $INSTANCEID | jq -r .Reservations [ 0 ] .Instances [ 0 ] .BlockDeviceMappings [ 0 ] .Ebs.VolumeId ) # Resize the EBS volume. aws ec2 modify-volume --volume-id $VOLUMEID --size $SIZE # Wait for the resize to finish. while [ \" $( aws ec2 describe-volumes-modifications --volume-id $VOLUMEID --filters Name = modification-state,Values = \"optimizing\" , \"completed\" | jq '.VolumesModifications | length' ) \" ! = \"1\" ] ; do sleep 1 done # Rewrite the partition table so that the partition takes up all the space that it can. sudo growpart /dev/nvme0n1p1 1 # Expand the size of the file system. sudo resize2fs /dev/nvme0n1p1 Tips API Documentation Python and Java have API documentation available for each exercise. You can view the documentation as you work in Cloud9. Java Python 1 make javadoc 1 tox -e docs Now select \"Preview -> Preview Running Application\" from the Cloud9 menu bar. Cloud9 will open a new pane in your IDE with a web browser rendering your API documentation. Cloud9 Cloud9 has lots of IDE features for you to leverage. Here's some links to help you make the most of your Cloud9 experience. (Links all open in a new window.) Cloud9 Code Navigation Cloud9 Keybindings Cloud9 Tutorial Cryptographic Details The Busy Engineer's Document Bucket only scratches the surface of the features offered by AWS KMS. To dive deep on how KMS can be useful to your application, check out the AWS Key Management Service Cryptographic Details Docs , for more information on the details of encryption, decryption, random number generation procedures, and more within KMS.","title":"Tips and Troubleshooting"},{"location":"tips-and-troubleshooting/#tips-and-troubleshooting","text":"This page contains reference information that might be useful as you work through the workshop.","title":"Tips and Troubleshooting"},{"location":"tips-and-troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"tips-and-troubleshooting/#errors-with-configuration","text":"If you are getting a NullPointerException (Java), or a KeyError (Python), or similar errors when interacting with the TOML files (config and state), try running the state generation step again to make sure the file is generated and well formed. 1 2 3 4 5 6 # Check the contents of your state file cat ~/.busy_engineers_state.toml # Regenerate your state file, if needed cd ~/environment/workshop/cdk/ make state Now try your work again.","title":"Errors with configuration"},{"location":"tips-and-troubleshooting/#automated-code-checks","text":"These commands will check your code for missing imports, syntax issues, and other minor issues that might trip you up. Java JavaScript Node.JS Typescript Node.JS Python 1 mvn verify 1 npm run prettier 1 npm run prettier 1 tox -e check","title":"Automated code checks"},{"location":"tips-and-troubleshooting/#missing-cloudformation-resources","text":"Make sure you take the defaults for which region to launch in (us-east-2). If you've changed the region for any part of the workshop, tear your stack down and start fresh.","title":"Missing CloudFormation resources"},{"location":"tips-and-troubleshooting/#more-disk-space-on-cloud9","text":"Working through the workshop, you might find that you are out of disk. If this happens, use the following script to expand your EBS volume. ( Script source ) Note that this is adapted from the script source because the Busy Engineer's Cloud9 instances run on EC2 Nitro, which has different block device identifiers. Step by step: Save the script below to resize.sh chmod +x resize.sh ./resize.sh By default, this will increase your volume to 20GB, but you may supply a different number if you prefer. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #!/bin/bash # Specify the desired volume size in GiB as a command-line argument. If not specified, default to 20 GiB. SIZE = ${ 1 :- 20 } # Install the jq command-line JSON processor. sudo yum -y install jq # Get the ID of the envrionment host Amazon EC2 instance. INSTANCEID = $( curl http://169.254.169.254/latest/meta-data//instance-id ) # Get the ID of the Amazon EBS volume associated with the instance. VOLUMEID = $( aws ec2 describe-instances --instance-id $INSTANCEID | jq -r .Reservations [ 0 ] .Instances [ 0 ] .BlockDeviceMappings [ 0 ] .Ebs.VolumeId ) # Resize the EBS volume. aws ec2 modify-volume --volume-id $VOLUMEID --size $SIZE # Wait for the resize to finish. while [ \" $( aws ec2 describe-volumes-modifications --volume-id $VOLUMEID --filters Name = modification-state,Values = \"optimizing\" , \"completed\" | jq '.VolumesModifications | length' ) \" ! = \"1\" ] ; do sleep 1 done # Rewrite the partition table so that the partition takes up all the space that it can. sudo growpart /dev/nvme0n1p1 1 # Expand the size of the file system. sudo resize2fs /dev/nvme0n1p1","title":"More disk space on Cloud9"},{"location":"tips-and-troubleshooting/#tips","text":"","title":"Tips"},{"location":"tips-and-troubleshooting/#api-documentation","text":"Python and Java have API documentation available for each exercise. You can view the documentation as you work in Cloud9. Java Python 1 make javadoc 1 tox -e docs Now select \"Preview -> Preview Running Application\" from the Cloud9 menu bar. Cloud9 will open a new pane in your IDE with a web browser rendering your API documentation.","title":"API Documentation"},{"location":"tips-and-troubleshooting/#cloud9","text":"Cloud9 has lots of IDE features for you to leverage. Here's some links to help you make the most of your Cloud9 experience. (Links all open in a new window.) Cloud9 Code Navigation Cloud9 Keybindings Cloud9 Tutorial","title":"Cloud9"},{"location":"tips-and-troubleshooting/#cryptographic-details","text":"The Busy Engineer's Document Bucket only scratches the surface of the features offered by AWS KMS. To dive deep on how KMS can be useful to your application, check out the AWS Key Management Service Cryptographic Details Docs , for more information on the details of encryption, decryption, random number generation procedures, and more within KMS.","title":"Cryptographic Details"}]}